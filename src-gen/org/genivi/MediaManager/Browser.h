/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.
* Used org.franca.core 0.8.9.
*
* 
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Browser_H_
#define ORG_GENIVI_MEDIAMANAGER_Browser_H_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <CommonAPI/SerializableStruct.h>
#include <CommonAPI/types.h>
#include <cstdint>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace MediaManager {

class Browser {
 public:
    virtual ~Browser() { }

    static inline const char* getInterfaceId();
    static inline CommonAPI::Version getInterfaceVersion();
    enum class SortOrder: int32_t {
        ASCENDING,
        DESCENDING
    };
    
    // Definition of a comparator still is necessary for GCC 4.4.1, topic is fixed since 4.5.1
    struct SortOrderComparator;
    struct SortKey: CommonAPI::SerializableStruct {
         SortOrder order;
         std::string keyName;
    
        SortKey() = default;
        SortKey(const SortOrder& order, const std::string& keyName);
    
    
        virtual void readFromInputStream(CommonAPI::InputStream& inputStream);
        virtual void writeToOutputStream(CommonAPI::OutputStream& outputStream) const;
    
        static inline void writeToTypeOutputStream(CommonAPI::TypeOutputStream& typeOutputStream) {
            typeOutputStream.writeInt32Type();
            typeOutputStream.writeStringType();
        }
    };
    enum class BrowserError: int32_t {
        NO_ERROR,
        NO_CONNECTION,
        BAD_PATH
    };
    
    // Definition of a comparator still is necessary for GCC 4.4.1, topic is fixed since 4.5.1
    struct BrowserErrorComparator;
};

const char* Browser::getInterfaceId() {
    static const char* interfaceId = "org.genivi.MediaManager.Browser";
    return interfaceId;
}

CommonAPI::Version Browser::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}

bool operator==(const Browser::SortKey& lhs, const Browser::SortKey& rhs);
inline bool operator!=(const Browser::SortKey& lhs, const Browser::SortKey& rhs) {
    return !(lhs == rhs);
}
inline CommonAPI::InputStream& operator>>(CommonAPI::InputStream& inputStream, Browser::SortOrder& enumValue) {
    return inputStream.readEnumValue<int32_t>(enumValue);
}

inline CommonAPI::OutputStream& operator<<(CommonAPI::OutputStream& outputStream, const Browser::SortOrder& enumValue) {
    return outputStream.writeEnumValue(static_cast<int32_t>(enumValue));
}

struct Browser::SortOrderComparator {
    inline bool operator()(const SortOrder& lhs, const SortOrder& rhs) const {
        return static_cast<int32_t>(lhs) < static_cast<int32_t>(rhs);
    }
};

inline CommonAPI::InputStream& operator>>(CommonAPI::InputStream& inputStream, Browser::BrowserError& enumValue) {
    return inputStream.readEnumValue<int32_t>(enumValue);
}

inline CommonAPI::OutputStream& operator<<(CommonAPI::OutputStream& outputStream, const Browser::BrowserError& enumValue) {
    return outputStream.writeEnumValue(static_cast<int32_t>(enumValue));
}

struct Browser::BrowserErrorComparator {
    inline bool operator()(const BrowserError& lhs, const BrowserError& rhs) const {
        return static_cast<int32_t>(lhs) < static_cast<int32_t>(rhs);
    }
};


} // namespace MediaManager
} // namespace genivi
} // namespace org

namespace CommonAPI {
    template<>
    struct BasicTypeWriter<org::genivi::MediaManager::Browser::SortOrder> {
        inline static void writeType (CommonAPI::TypeOutputStream& typeStream) {
            typeStream.writeInt32EnumType();
        }
    };
    
    template<>
    struct InputStreamVectorHelper<org::genivi::MediaManager::Browser::SortOrder> {
        static void beginReadVector(InputStream& inputStream, const std::vector<org::genivi::MediaManager::Browser::SortOrder>& vectorValue) {
            inputStream.beginReadInt32EnumVector();
        }
    };
    
    template <>
    struct OutputStreamVectorHelper<org::genivi::MediaManager::Browser::SortOrder> {
        static void beginWriteVector(OutputStream& outputStream, const std::vector<org::genivi::MediaManager::Browser::SortOrder>& vectorValue) {
            outputStream.beginWriteInt32EnumVector(vectorValue.size());
        }
    };
    template<>
    struct BasicTypeWriter<org::genivi::MediaManager::Browser::BrowserError> {
        inline static void writeType (CommonAPI::TypeOutputStream& typeStream) {
            typeStream.writeInt32EnumType();
        }
    };
    
    template<>
    struct InputStreamVectorHelper<org::genivi::MediaManager::Browser::BrowserError> {
        static void beginReadVector(InputStream& inputStream, const std::vector<org::genivi::MediaManager::Browser::BrowserError>& vectorValue) {
            inputStream.beginReadInt32EnumVector();
        }
    };
    
    template <>
    struct OutputStreamVectorHelper<org::genivi::MediaManager::Browser::BrowserError> {
        static void beginWriteVector(OutputStream& outputStream, const std::vector<org::genivi::MediaManager::Browser::BrowserError>& vectorValue) {
            outputStream.beginWriteInt32EnumVector(vectorValue.size());
        }
    };

}


namespace std {
    //hashes for types
    //Hash for SortOrder
    template<>
    struct hash<org::genivi::MediaManager::Browser::SortOrder> {
        inline size_t operator()(const org::genivi::MediaManager::Browser::SortOrder& sortOrder) const {
            return static_cast<int32_t>(sortOrder);
        }
    };
    //Hash for BrowserError
    template<>
    struct hash<org::genivi::MediaManager::Browser::BrowserError> {
        inline size_t operator()(const org::genivi::MediaManager::Browser::BrowserError& browserError) const {
            return static_cast<int32_t>(browserError);
        }
    };
    
    //hashes for error types
}

#endif // ORG_GENIVI_MEDIAMANAGER_Browser_H_
