/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.
* Used org.franca.core 0.8.9.
*
* 
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Player_DBUS_PROXY_H_
#define ORG_GENIVI_MEDIAMANAGER_Player_DBUS_PROXY_H_

#include <org/genivi/MediaManager/PlayerProxyBase.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusFactory.h>
#include <CommonAPI/DBus/DBusProxy.h>
#include <CommonAPI/DBus/DBusAttribute.h>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace org {
namespace genivi {
namespace MediaManager {

class PlayerDBusProxy: virtual public PlayerProxyBase, virtual public CommonAPI::DBus::DBusProxy {
 public:
    PlayerDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection);

    virtual ~PlayerDBusProxy() { }

    virtual MuteAttribute& getMuteAttribute();
    virtual ShuffleAttribute& getShuffleAttribute();
    virtual RepeatAttribute& getRepeatAttribute();
    virtual RateAttribute& getRateAttribute();
    virtual VolumeAttribute& getVolumeAttribute();
    virtual CanGoNextAttribute& getCanGoNextAttribute();
    virtual CanGoPreviousAttribute& getCanGoPreviousAttribute();
    virtual CanPauseAttribute& getCanPauseAttribute();
    virtual CanPlayAttribute& getCanPlayAttribute();
    virtual CanSeekAttribute& getCanSeekAttribute();
    virtual CurrentTrackAttribute& getCurrentTrackAttribute();
    virtual PlaybackStatusAttribute& getPlaybackStatusAttribute();
    virtual PositionAttribute& getPositionAttribute();


    /**
     * Skip to the next track in the play queue. If there is no
                          
     *  next track, playback is stopped. If playback is paused or
                        
     *    stopped, this function will set the next plack to be
                          
     *  played once playback is activated
     */
    virtual void next(CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    virtual std::future<CommonAPI::CallStatus> nextAsync(NextAsyncCallback callback);
    /**
     * Open the supplied Uri for playback in the playback engine.
             returns:
     *  INVALID_URI When an invalid URI is supplied
                                  
     *  (decided by playback engine)
                       NO_ERROR    On success
     * @param uri URI of media to play, uri format is decided by backend
     */
    virtual void openUri(const std::string& uri, CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    virtual std::future<CommonAPI::CallStatus> openUriAsync(const std::string& uri, OpenUriAsyncCallback callback);
    /**
     * Use the supplied playlist as the current play queue. If
                         
     *  the play queue is invalid, the old play queue is
                         
     *  untouched.
             returns: BAD_PLAYLIST If playlist can not be loaded
          
     *              NO_ERROR     On success
     */
    virtual void openPlaylist(const std::string& uri, CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    virtual std::future<CommonAPI::CallStatus> openPlaylistAsync(const std::string& uri, OpenPlaylistAsyncCallback callback);
    /**
     * Pause playback in the playback engine.
                           If already
     *  paused, this has no effect
                           Note: If CanPause is false,
     *  this has no effect
     */
    virtual void pause(CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    virtual std::future<CommonAPI::CallStatus> pauseAsync(PauseAsyncCallback callback);
    /**
     * Start or resume playback in the playback engine.
                           If
     *  playback is already commencing, this has not effect.
                           If
     *  paused, playback resumes from the current position.
                           If
     *  there is no track to play, calling this has no effect
                          
     *  Note: If CanPlay is false, this has no effect
     */
    virtual void play(CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    virtual std::future<CommonAPI::CallStatus> playAsync(PlayAsyncCallback callback);
    /**
     * Starts playback (see Play) if paused
                          Pauses playback (see
     *  Pause) is playing
     */
    virtual void playPause(CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    virtual std::future<CommonAPI::CallStatus> playPauseAsync(PlayPauseAsyncCallback callback);
    /**
     * Loads previous track in play queue
                          If there is no
     *  previous track, playback is stopped
                          If playback is
     *  stopped or paused, it remains this way,
                          but the next
     *  track to be played will the set
                          by this function
           
     *                Note: If CanGoPrevious is false, this has no effect
     */
    virtual void previous(CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    virtual std::future<CommonAPI::CallStatus> previousAsync(PreviousAsyncCallback callback);
    /**
     * Seek relatively in the current track
                          If a negative seek
     *  leads to a play position less than 0,
                          the play position
     *  will be set to 0.
                          If a positive seek leads outside the
     *  length of the current
                          track, this is treated like a call
     *  to Next()
                          Note: If CanSeek is false, this has no effect
     * @param pos Relative seek amount in microseconds
     */
    virtual void seek(const int64_t& pos, CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    virtual std::future<CommonAPI::CallStatus> seekAsync(const int64_t& pos, SeekAsyncCallback callback);
    /**
     * Jump to the specified position in the current
                           If the
     *  position is not within range of the current track,
                           do
     *  nothing
             Note: If CanSeek is false, this has no effect
     * @param pos Absolute position in microseconds
     */
    virtual void setPosition(const uint64_t& pos, CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    virtual std::future<CommonAPI::CallStatus> setPositionAsync(const uint64_t& pos, SetPositionAsyncCallback callback);
    

    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

 private:
   CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<MuteAttribute>> mute_;
   CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ShuffleAttribute>> shuffle_;
   CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RepeatAttribute>> repeat_;
   CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RateAttribute>> rate_;
   CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<VolumeAttribute>> volume_;
   CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanGoNextAttribute>> canGoNext_;
   CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanGoPreviousAttribute>> canGoPrevious_;
   CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanPauseAttribute>> canPause_;
   CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanPlayAttribute>> canPlay_;
   CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanSeekAttribute>> canSeek_;
   CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CurrentTrackAttribute>> currentTrack_;
   CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PlaybackStatusAttribute>> playbackStatus_;
   CommonAPI::DBus::DBusReadonlyAttribute<PositionAttribute> position_;

    
};



} // namespace MediaManager
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_MEDIAMANAGER_Player_DBUS_PROXY_H_
