/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.
* Used org.franca.core 0.8.9.
*
* 
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Player_H_
#define ORG_GENIVI_MEDIAMANAGER_Player_H_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <CommonAPI/types.h>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace MediaManager {

class Player {
 public:
    virtual ~Player() { }

    static inline const char* getInterfaceId();
    static inline CommonAPI::Version getInterfaceVersion();
    enum class MuteStatus: int32_t {
        MUTED,
        UNMUTED
    };
    
    // Definition of a comparator still is necessary for GCC 4.4.1, topic is fixed since 4.5.1
    struct MuteStatusComparator;
    enum class PlayerError: int32_t {
        NO_ERROR,
        BAD_PLAYLIST,
        BACKEND_UNREACHABLE
    };
    
    // Definition of a comparator still is necessary for GCC 4.4.1, topic is fixed since 4.5.1
    struct PlayerErrorComparator;
    enum class ShuffleStatus: int32_t {
        SHUFFLE,
        UNSHUFFLE
    };
    
    // Definition of a comparator still is necessary for GCC 4.4.1, topic is fixed since 4.5.1
    struct ShuffleStatusComparator;
    enum class RepeatStatus: int32_t {
        REPEAT,
        NO_REPEAT
    };
    
    // Definition of a comparator still is necessary for GCC 4.4.1, topic is fixed since 4.5.1
    struct RepeatStatusComparator;
    enum class RateStatus: int32_t {
        RATE_NEG_16,
        RATE_NEG_8,
        RATE_NEG_4,
        RATE_NEG_2,
        RATE_NEG_1,
        RATE_1,
        RATE_2,
        RATE_4,
        RATE_8,
        RATE_16
    };
    
    // Definition of a comparator still is necessary for GCC 4.4.1, topic is fixed since 4.5.1
    struct RateStatusComparator;
    enum class PlaybackStatus: int32_t {
        PLAYING,
        PAUSED
    };
    
    // Definition of a comparator still is necessary for GCC 4.4.1, topic is fixed since 4.5.1
    struct PlaybackStatusComparator;
};

const char* Player::getInterfaceId() {
    static const char* interfaceId = "org.genivi.MediaManager.Player";
    return interfaceId;
}

CommonAPI::Version Player::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}

inline CommonAPI::InputStream& operator>>(CommonAPI::InputStream& inputStream, Player::MuteStatus& enumValue) {
    return inputStream.readEnumValue<int32_t>(enumValue);
}

inline CommonAPI::OutputStream& operator<<(CommonAPI::OutputStream& outputStream, const Player::MuteStatus& enumValue) {
    return outputStream.writeEnumValue(static_cast<int32_t>(enumValue));
}

struct Player::MuteStatusComparator {
    inline bool operator()(const MuteStatus& lhs, const MuteStatus& rhs) const {
        return static_cast<int32_t>(lhs) < static_cast<int32_t>(rhs);
    }
};

inline CommonAPI::InputStream& operator>>(CommonAPI::InputStream& inputStream, Player::PlayerError& enumValue) {
    return inputStream.readEnumValue<int32_t>(enumValue);
}

inline CommonAPI::OutputStream& operator<<(CommonAPI::OutputStream& outputStream, const Player::PlayerError& enumValue) {
    return outputStream.writeEnumValue(static_cast<int32_t>(enumValue));
}

struct Player::PlayerErrorComparator {
    inline bool operator()(const PlayerError& lhs, const PlayerError& rhs) const {
        return static_cast<int32_t>(lhs) < static_cast<int32_t>(rhs);
    }
};

inline CommonAPI::InputStream& operator>>(CommonAPI::InputStream& inputStream, Player::ShuffleStatus& enumValue) {
    return inputStream.readEnumValue<int32_t>(enumValue);
}

inline CommonAPI::OutputStream& operator<<(CommonAPI::OutputStream& outputStream, const Player::ShuffleStatus& enumValue) {
    return outputStream.writeEnumValue(static_cast<int32_t>(enumValue));
}

struct Player::ShuffleStatusComparator {
    inline bool operator()(const ShuffleStatus& lhs, const ShuffleStatus& rhs) const {
        return static_cast<int32_t>(lhs) < static_cast<int32_t>(rhs);
    }
};

inline CommonAPI::InputStream& operator>>(CommonAPI::InputStream& inputStream, Player::RepeatStatus& enumValue) {
    return inputStream.readEnumValue<int32_t>(enumValue);
}

inline CommonAPI::OutputStream& operator<<(CommonAPI::OutputStream& outputStream, const Player::RepeatStatus& enumValue) {
    return outputStream.writeEnumValue(static_cast<int32_t>(enumValue));
}

struct Player::RepeatStatusComparator {
    inline bool operator()(const RepeatStatus& lhs, const RepeatStatus& rhs) const {
        return static_cast<int32_t>(lhs) < static_cast<int32_t>(rhs);
    }
};

inline CommonAPI::InputStream& operator>>(CommonAPI::InputStream& inputStream, Player::RateStatus& enumValue) {
    return inputStream.readEnumValue<int32_t>(enumValue);
}

inline CommonAPI::OutputStream& operator<<(CommonAPI::OutputStream& outputStream, const Player::RateStatus& enumValue) {
    return outputStream.writeEnumValue(static_cast<int32_t>(enumValue));
}

struct Player::RateStatusComparator {
    inline bool operator()(const RateStatus& lhs, const RateStatus& rhs) const {
        return static_cast<int32_t>(lhs) < static_cast<int32_t>(rhs);
    }
};

inline CommonAPI::InputStream& operator>>(CommonAPI::InputStream& inputStream, Player::PlaybackStatus& enumValue) {
    return inputStream.readEnumValue<int32_t>(enumValue);
}

inline CommonAPI::OutputStream& operator<<(CommonAPI::OutputStream& outputStream, const Player::PlaybackStatus& enumValue) {
    return outputStream.writeEnumValue(static_cast<int32_t>(enumValue));
}

struct Player::PlaybackStatusComparator {
    inline bool operator()(const PlaybackStatus& lhs, const PlaybackStatus& rhs) const {
        return static_cast<int32_t>(lhs) < static_cast<int32_t>(rhs);
    }
};


} // namespace MediaManager
} // namespace genivi
} // namespace org

namespace CommonAPI {
    template<>
    struct BasicTypeWriter<org::genivi::MediaManager::Player::MuteStatus> {
        inline static void writeType (CommonAPI::TypeOutputStream& typeStream) {
            typeStream.writeInt32EnumType();
        }
    };
    
    template<>
    struct InputStreamVectorHelper<org::genivi::MediaManager::Player::MuteStatus> {
        static void beginReadVector(InputStream& inputStream, const std::vector<org::genivi::MediaManager::Player::MuteStatus>& vectorValue) {
            inputStream.beginReadInt32EnumVector();
        }
    };
    
    template <>
    struct OutputStreamVectorHelper<org::genivi::MediaManager::Player::MuteStatus> {
        static void beginWriteVector(OutputStream& outputStream, const std::vector<org::genivi::MediaManager::Player::MuteStatus>& vectorValue) {
            outputStream.beginWriteInt32EnumVector(vectorValue.size());
        }
    };
    template<>
    struct BasicTypeWriter<org::genivi::MediaManager::Player::PlayerError> {
        inline static void writeType (CommonAPI::TypeOutputStream& typeStream) {
            typeStream.writeInt32EnumType();
        }
    };
    
    template<>
    struct InputStreamVectorHelper<org::genivi::MediaManager::Player::PlayerError> {
        static void beginReadVector(InputStream& inputStream, const std::vector<org::genivi::MediaManager::Player::PlayerError>& vectorValue) {
            inputStream.beginReadInt32EnumVector();
        }
    };
    
    template <>
    struct OutputStreamVectorHelper<org::genivi::MediaManager::Player::PlayerError> {
        static void beginWriteVector(OutputStream& outputStream, const std::vector<org::genivi::MediaManager::Player::PlayerError>& vectorValue) {
            outputStream.beginWriteInt32EnumVector(vectorValue.size());
        }
    };
    template<>
    struct BasicTypeWriter<org::genivi::MediaManager::Player::ShuffleStatus> {
        inline static void writeType (CommonAPI::TypeOutputStream& typeStream) {
            typeStream.writeInt32EnumType();
        }
    };
    
    template<>
    struct InputStreamVectorHelper<org::genivi::MediaManager::Player::ShuffleStatus> {
        static void beginReadVector(InputStream& inputStream, const std::vector<org::genivi::MediaManager::Player::ShuffleStatus>& vectorValue) {
            inputStream.beginReadInt32EnumVector();
        }
    };
    
    template <>
    struct OutputStreamVectorHelper<org::genivi::MediaManager::Player::ShuffleStatus> {
        static void beginWriteVector(OutputStream& outputStream, const std::vector<org::genivi::MediaManager::Player::ShuffleStatus>& vectorValue) {
            outputStream.beginWriteInt32EnumVector(vectorValue.size());
        }
    };
    template<>
    struct BasicTypeWriter<org::genivi::MediaManager::Player::RepeatStatus> {
        inline static void writeType (CommonAPI::TypeOutputStream& typeStream) {
            typeStream.writeInt32EnumType();
        }
    };
    
    template<>
    struct InputStreamVectorHelper<org::genivi::MediaManager::Player::RepeatStatus> {
        static void beginReadVector(InputStream& inputStream, const std::vector<org::genivi::MediaManager::Player::RepeatStatus>& vectorValue) {
            inputStream.beginReadInt32EnumVector();
        }
    };
    
    template <>
    struct OutputStreamVectorHelper<org::genivi::MediaManager::Player::RepeatStatus> {
        static void beginWriteVector(OutputStream& outputStream, const std::vector<org::genivi::MediaManager::Player::RepeatStatus>& vectorValue) {
            outputStream.beginWriteInt32EnumVector(vectorValue.size());
        }
    };
    template<>
    struct BasicTypeWriter<org::genivi::MediaManager::Player::RateStatus> {
        inline static void writeType (CommonAPI::TypeOutputStream& typeStream) {
            typeStream.writeInt32EnumType();
        }
    };
    
    template<>
    struct InputStreamVectorHelper<org::genivi::MediaManager::Player::RateStatus> {
        static void beginReadVector(InputStream& inputStream, const std::vector<org::genivi::MediaManager::Player::RateStatus>& vectorValue) {
            inputStream.beginReadInt32EnumVector();
        }
    };
    
    template <>
    struct OutputStreamVectorHelper<org::genivi::MediaManager::Player::RateStatus> {
        static void beginWriteVector(OutputStream& outputStream, const std::vector<org::genivi::MediaManager::Player::RateStatus>& vectorValue) {
            outputStream.beginWriteInt32EnumVector(vectorValue.size());
        }
    };
    template<>
    struct BasicTypeWriter<org::genivi::MediaManager::Player::PlaybackStatus> {
        inline static void writeType (CommonAPI::TypeOutputStream& typeStream) {
            typeStream.writeInt32EnumType();
        }
    };
    
    template<>
    struct InputStreamVectorHelper<org::genivi::MediaManager::Player::PlaybackStatus> {
        static void beginReadVector(InputStream& inputStream, const std::vector<org::genivi::MediaManager::Player::PlaybackStatus>& vectorValue) {
            inputStream.beginReadInt32EnumVector();
        }
    };
    
    template <>
    struct OutputStreamVectorHelper<org::genivi::MediaManager::Player::PlaybackStatus> {
        static void beginWriteVector(OutputStream& outputStream, const std::vector<org::genivi::MediaManager::Player::PlaybackStatus>& vectorValue) {
            outputStream.beginWriteInt32EnumVector(vectorValue.size());
        }
    };

}


namespace std {
    //hashes for types
    //Hash for MuteStatus
    template<>
    struct hash<org::genivi::MediaManager::Player::MuteStatus> {
        inline size_t operator()(const org::genivi::MediaManager::Player::MuteStatus& muteStatus) const {
            return static_cast<int32_t>(muteStatus);
        }
    };
    //Hash for PlayerError
    template<>
    struct hash<org::genivi::MediaManager::Player::PlayerError> {
        inline size_t operator()(const org::genivi::MediaManager::Player::PlayerError& playerError) const {
            return static_cast<int32_t>(playerError);
        }
    };
    //Hash for ShuffleStatus
    template<>
    struct hash<org::genivi::MediaManager::Player::ShuffleStatus> {
        inline size_t operator()(const org::genivi::MediaManager::Player::ShuffleStatus& shuffleStatus) const {
            return static_cast<int32_t>(shuffleStatus);
        }
    };
    //Hash for RepeatStatus
    template<>
    struct hash<org::genivi::MediaManager::Player::RepeatStatus> {
        inline size_t operator()(const org::genivi::MediaManager::Player::RepeatStatus& repeatStatus) const {
            return static_cast<int32_t>(repeatStatus);
        }
    };
    //Hash for RateStatus
    template<>
    struct hash<org::genivi::MediaManager::Player::RateStatus> {
        inline size_t operator()(const org::genivi::MediaManager::Player::RateStatus& rateStatus) const {
            return static_cast<int32_t>(rateStatus);
        }
    };
    //Hash for PlaybackStatus
    template<>
    struct hash<org::genivi::MediaManager::Player::PlaybackStatus> {
        inline size_t operator()(const org::genivi::MediaManager::Player::PlaybackStatus& playbackStatus) const {
            return static_cast<int32_t>(playbackStatus);
        }
    };
    
    //hashes for error types
}

#endif // ORG_GENIVI_MEDIAMANAGER_Player_H_
