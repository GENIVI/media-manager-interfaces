/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.
* Used org.franca.core 0.8.9.
*
* 
*/
/**
 * Indexer control interface. Allows administrational tasks for
                 
 *  the indexer backend, such as starting, stopping and requesting
               
 *    status of the indexer.
                  For querying the database, please
 *  see
                  org.genivi.mediamanager.Browser
 */
#ifndef ORG_GENIVI_MEDIAMANAGER_Indexer_H_
#define ORG_GENIVI_MEDIAMANAGER_Indexer_H_


#include <org/genivi/MediaManager/MediaTypes.h>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <CommonAPI/types.h>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace MediaManager {

class Indexer {
 public:
    virtual ~Indexer() { }

    static inline const char* getInterfaceId();
    static inline CommonAPI::Version getInterfaceVersion();
    /**
     * RUNNING: The indexer is currently traversing files and/or
                         
     *           extracting metadata
                          STOPPED: The indexer has
     *  been stopped and will not start
                                     indexing by
     *  itself
                          IDLE:    The indexer has finished, and is waiting
     *  for new
                                     files to index
     */
    enum class IndexerStatus: int32_t {
        RUNNING,
        STOPPED,
        IDLE
    };
    
    // Definition of a comparator still is necessary for GCC 4.4.1, topic is fixed since 4.5.1
    struct IndexerStatusComparator;
    typedef MediaTypes::BackendError IndexerError;
};

const char* Indexer::getInterfaceId() {
    static const char* interfaceId = "org.genivi.MediaManager.Indexer";
    return interfaceId;
}

CommonAPI::Version Indexer::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}

/**
 * RUNNING: The indexer is currently traversing files and/or
                     
 *           extracting metadata
                      STOPPED: The indexer has
 *  been stopped and will not start
                                 indexing by
 *  itself
                      IDLE:    The indexer has finished, and is waiting
 *  for new
                                 files to index
 */
inline CommonAPI::InputStream& operator>>(CommonAPI::InputStream& inputStream, Indexer::IndexerStatus& enumValue) {
    return inputStream.readEnumValue<int32_t>(enumValue);
}

inline CommonAPI::OutputStream& operator<<(CommonAPI::OutputStream& outputStream, const Indexer::IndexerStatus& enumValue) {
    return outputStream.writeEnumValue(static_cast<int32_t>(enumValue));
}

struct Indexer::IndexerStatusComparator {
    inline bool operator()(const IndexerStatus& lhs, const IndexerStatus& rhs) const {
        return static_cast<int32_t>(lhs) < static_cast<int32_t>(rhs);
    }
};


} // namespace MediaManager
} // namespace genivi
} // namespace org

namespace CommonAPI {
    template<>
    struct BasicTypeWriter<org::genivi::MediaManager::Indexer::IndexerStatus> {
        inline static void writeType (CommonAPI::TypeOutputStream& typeStream) {
            typeStream.writeInt32EnumType();
        }
    };
    
    template<>
    struct InputStreamVectorHelper<org::genivi::MediaManager::Indexer::IndexerStatus> {
        static void beginReadVector(InputStream& inputStream, const std::vector<org::genivi::MediaManager::Indexer::IndexerStatus>& vectorValue) {
            inputStream.beginReadInt32EnumVector();
        }
    };
    
    template <>
    struct OutputStreamVectorHelper<org::genivi::MediaManager::Indexer::IndexerStatus> {
        static void beginWriteVector(OutputStream& outputStream, const std::vector<org::genivi::MediaManager::Indexer::IndexerStatus>& vectorValue) {
            outputStream.beginWriteInt32EnumVector(vectorValue.size());
        }
    };

}


namespace std {
    //hashes for types
    //Hash for IndexerStatus
    template<>
    struct hash<org::genivi::MediaManager::Indexer::IndexerStatus> {
        inline size_t operator()(const org::genivi::MediaManager::Indexer::IndexerStatus& indexerStatus) const {
            return static_cast<int32_t>(indexerStatus);
        }
    };
    
    //hashes for error types
}

#endif // ORG_GENIVI_MEDIAMANAGER_Indexer_H_
