/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.
* Used org.franca.core 0.8.9.
*
* 
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Player_PROXY_H_
#define ORG_GENIVI_MEDIAMANAGER_Player_PROXY_H_

#include "PlayerProxyBase.h"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.h>
#include <CommonAPI/Factory.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace MediaManager {

template <typename ... _AttributeExtensions>
class PlayerProxy: virtual public Player, virtual public PlayerProxyBase, public _AttributeExtensions... {
 public:
    PlayerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~PlayerProxy();

    /**
     * Mute or unmute audio. When muted, the player backend will
                         
     *  not produce any audio output.
     */
    /**
     * Returns the wrapper class that provides access to the attribute mute.
     */
    virtual MuteAttribute& getMuteAttribute() {
        return delegate_->getMuteAttribute();
    }
    /**
     * Shuffle or unshuffle the current play queue. Shuffling,
                      
     *  un-shuffling and then re-shuffling will yield two different
                      
     *  shufflings (which are not guaranteed to be different)
     */
    /**
     * Returns the wrapper class that provides access to the attribute shuffle.
     */
    virtual ShuffleAttribute& getShuffleAttribute() {
        return delegate_->getShuffleAttribute();
    }
    /**
     * Toggle repeat for the current playlist. If enabled,
                         
     *  playback will continue with the first item of the current
                        
     *   play queue when the last item has finished playing
     */
    /**
     * Returns the wrapper class that provides access to the attribute repeat.
     */
    virtual RepeatAttribute& getRepeatAttribute() {
        return delegate_->getRepeatAttribute();
    }
    /**
     * Set the playback rate
     */
    /**
     * Returns the wrapper class that provides access to the attribute rate.
     */
    virtual RateAttribute& getRateAttribute() {
        return delegate_->getRateAttribute();
    }
    /**
     * Get or set volume, 0 is muted, and 1.0 means maximum
                         
     *  volume. Values outside this range will be capped
     */
    /**
     * Returns the wrapper class that provides access to the attribute volume.
     */
    virtual VolumeAttribute& getVolumeAttribute() {
        return delegate_->getVolumeAttribute();
    }
    /**
     * Indicates whether Next() is available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canGoNext.
     */
    virtual CanGoNextAttribute& getCanGoNextAttribute() {
        return delegate_->getCanGoNextAttribute();
    }
    /**
     * Indicates whether Previous() is available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canGoPrevious.
     */
    virtual CanGoPreviousAttribute& getCanGoPreviousAttribute() {
        return delegate_->getCanGoPreviousAttribute();
    }
    /**
     * Indicates whether Pause() is available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canPause.
     */
    virtual CanPauseAttribute& getCanPauseAttribute() {
        return delegate_->getCanPauseAttribute();
    }
    /**
     * Indicates whether Play() is available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canPlay.
     */
    virtual CanPlayAttribute& getCanPlayAttribute() {
        return delegate_->getCanPlayAttribute();
    }
    /**
     * Indicates whether Seek and SetPosition() are available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canSeek.
     */
    virtual CanSeekAttribute& getCanSeekAttribute() {
        return delegate_->getCanSeekAttribute();
    }
    /**
     * Indicates the index in the play queue of the currently
                         
     *  playing track
     */
    /**
     * Returns the wrapper class that provides access to the attribute currentTrack.
     */
    virtual CurrentTrackAttribute& getCurrentTrackAttribute() {
        return delegate_->getCurrentTrackAttribute();
    }
    /**
     * Indicates current playback status
     */
    /**
     * Returns the wrapper class that provides access to the attribute playbackStatus.
     */
    virtual PlaybackStatusAttribute& getPlaybackStatusAttribute() {
        return delegate_->getPlaybackStatusAttribute();
    }
    /**
     * Indicates current position in the currently playing
                          track
     */
    /**
     * Returns the wrapper class that provides access to the attribute position.
     */
    virtual PositionAttribute& getPositionAttribute() {
        return delegate_->getPositionAttribute();
    }


    /**
     * Skip to the next track in the play queue. If there is no
                          
     *  next track, playback is stopped. If playback is paused or
                        
     *    stopped, this function will set the next plack to be
                          
     *  played once playback is activated
     * 
     * Calls next with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void next(CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    /**
     * Calls next with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> nextAsync(NextAsyncCallback callback);
    /**
     * Open the supplied Uri for playback in the playback engine.
             returns:
     *  INVALID_URI When an invalid URI is supplied
                                  
     *  (decided by playback engine)
                       NO_ERROR    On success
     * @param uri URI of media to play, uri format is decided by backend
     * 
     * Calls openUri with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void openUri(const std::string& uri, CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    /**
     * Calls openUri with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> openUriAsync(const std::string& uri, OpenUriAsyncCallback callback);
    /**
     * Enqueue the supplied Uri for playback in the playback engine.
             returns:
     *  INVALID_URI When an invalid URI is supplied
                                  
     *  (decided by playback engine)
                      NO_ERROR    On success
     * @param uri URI of media to enqueue, uri format is decided by backend
     * 
     * Calls enqueueUri with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void enqueueUri(const std::string& uri, CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    /**
     * Calls enqueueUri with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> enqueueUriAsync(const std::string& uri, EnqueueUriAsyncCallback callback);
    /**
     * Dequeue the item with the supplied index in the playback
                         
     *  engine.
     * @param pos index of media to dequeue
     * 
     * Calls dequeueIndex with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void dequeueIndex(const uint64_t& pos, CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    /**
     * Calls dequeueIndex with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> dequeueIndexAsync(const uint64_t& pos, DequeueIndexAsyncCallback callback);
    /**
     * Retrieve the current play queue in JSON format
             returns: Current play
     *  queue in JSON format
     * 
     * Calls getCurrentPlayQueue with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCurrentPlayQueue(CommonAPI::CallStatus& callStatus, std::string& playQueue, Player::PlayerError& e);
    /**
     * Calls getCurrentPlayQueue with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCurrentPlayQueueAsync(GetCurrentPlayQueueAsyncCallback callback);
    /**
     * Use the supplied playlist as the current play queue. If
                         
     *  the play queue is invalid, the old play queue is
                         
     *  untouched.
             returns: BAD_PLAYLIST If playlist can not be loaded
          
     *              NO_ERROR     On success
     * 
     * Calls openPlaylist with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void openPlaylist(const std::string& uri, CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    /**
     * Calls openPlaylist with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> openPlaylistAsync(const std::string& uri, OpenPlaylistAsyncCallback callback);
    /**
     * Pause playback in the playback engine.
                           If already
     *  paused, this has no effect
                           Note: If CanPause is false,
     *  this has no effect
     * 
     * Calls pause with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void pause(CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    /**
     * Calls pause with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> pauseAsync(PauseAsyncCallback callback);
    /**
     * Start or resume playback in the playback engine.
                           If
     *  playback is already commencing, this has not effect.
                           If
     *  paused, playback resumes from the current position.
                           If
     *  there is no track to play, calling this has no effect
                          
     *  Note: If CanPlay is false, this has no effect
     * 
     * Calls play with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void play(CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    /**
     * Calls play with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> playAsync(PlayAsyncCallback callback);
    /**
     * Starts playback (see Play) if paused
                          Pauses playback (see
     *  Pause) is playing
     * 
     * Calls playPause with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void playPause(CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    /**
     * Calls playPause with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> playPauseAsync(PlayPauseAsyncCallback callback);
    /**
     * Loads previous track in play queue
                          If there is no
     *  previous track, playback is stopped
                          If playback is
     *  stopped or paused, it remains this way,
                          but the next
     *  track to be played will the set
                          by this function
           
     *                Note: If CanGoPrevious is false, this has no effect
     * 
     * Calls previous with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void previous(CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    /**
     * Calls previous with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> previousAsync(PreviousAsyncCallback callback);
    /**
     * Seek relatively in the current track
                          If a negative seek
     *  leads to a play position less than 0,
                          the play position
     *  will be set to 0.
                          If a positive seek leads outside the
     *  length of the current
                          track, this is treated like a call
     *  to Next()
                          Note: If CanSeek is false, this has no effect
     * @param pos Relative seek amount in microseconds
     * 
     * Calls seek with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void seek(const int64_t& pos, CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    /**
     * Calls seek with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> seekAsync(const int64_t& pos, SeekAsyncCallback callback);
    /**
     * Jump to the specified position in the current
                           If the
     *  position is not within range of the current track,
                           do
     *  nothing
             Note: If CanSeek is false, this has no effect
     * @param pos Absolute position in microseconds
     * 
     * Calls setPosition with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setPosition(const uint64_t& pos, CommonAPI::CallStatus& callStatus, Player::PlayerError& e);
    /**
     * Calls setPosition with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setPositionAsync(const uint64_t& pos, SetPositionAsyncCallback callback);
    

    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual std::string getAddress() const;

    /**
     * Returns the domain of the remote partner this proxy communicates with.
     */
    virtual const std::string& getDomain() const;

    /** 
     * Returns the service ID of the remote partner this proxy communicates with.
     */
    virtual const std::string& getServiceId() const;

    /**
     * Returns the instance ID of the remote partner this proxy communicates with.
     */
    virtual const std::string& getInstanceId() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<PlayerProxyBase> delegate_;
};

namespace PlayerExtensions {
    /**
     * Mute or unmute audio. When muted, the player backend will
                         
     *  not produce any audio output.
     */
    template <template <typename > class _ExtensionType>
    class MuteAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::MuteAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::MuteAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        MuteAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getMuteAttribute()) {
        }
    
        inline extension_type& getMuteAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * Shuffle or unshuffle the current play queue. Shuffling,
                      
     *  un-shuffling and then re-shuffling will yield two different
                      
     *  shufflings (which are not guaranteed to be different)
     */
    template <template <typename > class _ExtensionType>
    class ShuffleAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::ShuffleAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::ShuffleAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        ShuffleAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getShuffleAttribute()) {
        }
    
        inline extension_type& getShuffleAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * Toggle repeat for the current playlist. If enabled,
                         
     *  playback will continue with the first item of the current
                        
     *   play queue when the last item has finished playing
     */
    template <template <typename > class _ExtensionType>
    class RepeatAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::RepeatAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::RepeatAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        RepeatAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getRepeatAttribute()) {
        }
    
        inline extension_type& getRepeatAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * Set the playback rate
     */
    template <template <typename > class _ExtensionType>
    class RateAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::RateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::RateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        RateAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getRateAttribute()) {
        }
    
        inline extension_type& getRateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * Get or set volume, 0 is muted, and 1.0 means maximum
                         
     *  volume. Values outside this range will be capped
     */
    template <template <typename > class _ExtensionType>
    class VolumeAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::VolumeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::VolumeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        VolumeAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getVolumeAttribute()) {
        }
    
        inline extension_type& getVolumeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * Indicates whether Next() is available
     */
    template <template <typename > class _ExtensionType>
    class CanGoNextAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanGoNextAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanGoNextAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        CanGoNextAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanGoNextAttribute()) {
        }
    
        inline extension_type& getCanGoNextAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * Indicates whether Previous() is available
     */
    template <template <typename > class _ExtensionType>
    class CanGoPreviousAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanGoPreviousAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanGoPreviousAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        CanGoPreviousAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanGoPreviousAttribute()) {
        }
    
        inline extension_type& getCanGoPreviousAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * Indicates whether Pause() is available
     */
    template <template <typename > class _ExtensionType>
    class CanPauseAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanPauseAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanPauseAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        CanPauseAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanPauseAttribute()) {
        }
    
        inline extension_type& getCanPauseAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * Indicates whether Play() is available
     */
    template <template <typename > class _ExtensionType>
    class CanPlayAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanPlayAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanPlayAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        CanPlayAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanPlayAttribute()) {
        }
    
        inline extension_type& getCanPlayAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * Indicates whether Seek and SetPosition() are available
     */
    template <template <typename > class _ExtensionType>
    class CanSeekAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanSeekAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanSeekAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        CanSeekAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanSeekAttribute()) {
        }
    
        inline extension_type& getCanSeekAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * Indicates the index in the play queue of the currently
                         
     *  playing track
     */
    template <template <typename > class _ExtensionType>
    class CurrentTrackAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CurrentTrackAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CurrentTrackAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        CurrentTrackAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCurrentTrackAttribute()) {
        }
    
        inline extension_type& getCurrentTrackAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * Indicates current playback status
     */
    template <template <typename > class _ExtensionType>
    class PlaybackStatusAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::PlaybackStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::PlaybackStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        PlaybackStatusAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getPlaybackStatusAttribute()) {
        }
    
        inline extension_type& getPlaybackStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * Indicates current position in the currently playing
                          track
     */
    template <template <typename > class _ExtensionType>
    class PositionAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::PositionAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::PositionAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        PositionAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getPositionAttribute()) {
        }
    
        inline extension_type& getPositionAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace PlayerExtensions

//
// PlayerProxy Implementation
//
template <typename ... _AttributeExtensions>
PlayerProxy<_AttributeExtensions...>::PlayerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        delegate_(std::dynamic_pointer_cast<PlayerProxyBase>(delegate)),
        _AttributeExtensions(*(std::dynamic_pointer_cast<PlayerProxyBase>(delegate)))... {
}

template <typename ... _AttributeExtensions>
PlayerProxy<_AttributeExtensions...>::~PlayerProxy() {
}

/**
 * Skip to the next track in the play queue. If there is no
                      
 *  next track, playback is stopped. If playback is paused or
                    
 *    stopped, this function will set the next plack to be
                      
 *  played once playback is activated
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::next(CommonAPI::CallStatus& callStatus, Player::PlayerError& e) {
    delegate_->next(callStatus, e);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::nextAsync(NextAsyncCallback callback) {
    return delegate_->nextAsync(callback);
}
/**
 * Open the supplied Uri for playback in the playback engine.
         returns:
 *  INVALID_URI When an invalid URI is supplied
                              
 *  (decided by playback engine)
                   NO_ERROR    On success
 * @param uri URI of media to play, uri format is decided by backend
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::openUri(const std::string& uri, CommonAPI::CallStatus& callStatus, Player::PlayerError& e) {
    delegate_->openUri(uri, callStatus, e);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::openUriAsync(const std::string& uri, OpenUriAsyncCallback callback) {
    return delegate_->openUriAsync(uri, callback);
}
/**
 * Enqueue the supplied Uri for playback in the playback engine.
         returns:
 *  INVALID_URI When an invalid URI is supplied
                              
 *  (decided by playback engine)
                  NO_ERROR    On success
 * @param uri URI of media to enqueue, uri format is decided by backend
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::enqueueUri(const std::string& uri, CommonAPI::CallStatus& callStatus, Player::PlayerError& e) {
    delegate_->enqueueUri(uri, callStatus, e);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::enqueueUriAsync(const std::string& uri, EnqueueUriAsyncCallback callback) {
    return delegate_->enqueueUriAsync(uri, callback);
}
/**
 * Dequeue the item with the supplied index in the playback
                     
 *  engine.
 * @param pos index of media to dequeue
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::dequeueIndex(const uint64_t& pos, CommonAPI::CallStatus& callStatus, Player::PlayerError& e) {
    delegate_->dequeueIndex(pos, callStatus, e);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::dequeueIndexAsync(const uint64_t& pos, DequeueIndexAsyncCallback callback) {
    return delegate_->dequeueIndexAsync(pos, callback);
}
/**
 * Retrieve the current play queue in JSON format
         returns: Current play
 *  queue in JSON format
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::getCurrentPlayQueue(CommonAPI::CallStatus& callStatus, std::string& playQueue, Player::PlayerError& e) {
    delegate_->getCurrentPlayQueue(callStatus, playQueue, e);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::getCurrentPlayQueueAsync(GetCurrentPlayQueueAsyncCallback callback) {
    return delegate_->getCurrentPlayQueueAsync(callback);
}
/**
 * Use the supplied playlist as the current play queue. If
                     
 *  the play queue is invalid, the old play queue is
                     
 *  untouched.
         returns: BAD_PLAYLIST If playlist can not be loaded
      
 *              NO_ERROR     On success
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::openPlaylist(const std::string& uri, CommonAPI::CallStatus& callStatus, Player::PlayerError& e) {
    delegate_->openPlaylist(uri, callStatus, e);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::openPlaylistAsync(const std::string& uri, OpenPlaylistAsyncCallback callback) {
    return delegate_->openPlaylistAsync(uri, callback);
}
/**
 * Pause playback in the playback engine.
                       If already
 *  paused, this has no effect
                       Note: If CanPause is false,
 *  this has no effect
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::pause(CommonAPI::CallStatus& callStatus, Player::PlayerError& e) {
    delegate_->pause(callStatus, e);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::pauseAsync(PauseAsyncCallback callback) {
    return delegate_->pauseAsync(callback);
}
/**
 * Start or resume playback in the playback engine.
                       If
 *  playback is already commencing, this has not effect.
                       If
 *  paused, playback resumes from the current position.
                       If
 *  there is no track to play, calling this has no effect
                      
 *  Note: If CanPlay is false, this has no effect
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::play(CommonAPI::CallStatus& callStatus, Player::PlayerError& e) {
    delegate_->play(callStatus, e);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::playAsync(PlayAsyncCallback callback) {
    return delegate_->playAsync(callback);
}
/**
 * Starts playback (see Play) if paused
                      Pauses playback (see
 *  Pause) is playing
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::playPause(CommonAPI::CallStatus& callStatus, Player::PlayerError& e) {
    delegate_->playPause(callStatus, e);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::playPauseAsync(PlayPauseAsyncCallback callback) {
    return delegate_->playPauseAsync(callback);
}
/**
 * Loads previous track in play queue
                      If there is no
 *  previous track, playback is stopped
                      If playback is
 *  stopped or paused, it remains this way,
                      but the next
 *  track to be played will the set
                      by this function
       
 *                Note: If CanGoPrevious is false, this has no effect
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::previous(CommonAPI::CallStatus& callStatus, Player::PlayerError& e) {
    delegate_->previous(callStatus, e);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::previousAsync(PreviousAsyncCallback callback) {
    return delegate_->previousAsync(callback);
}
/**
 * Seek relatively in the current track
                      If a negative seek
 *  leads to a play position less than 0,
                      the play position
 *  will be set to 0.
                      If a positive seek leads outside the
 *  length of the current
                      track, this is treated like a call
 *  to Next()
                      Note: If CanSeek is false, this has no effect
 * @param pos Relative seek amount in microseconds
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::seek(const int64_t& pos, CommonAPI::CallStatus& callStatus, Player::PlayerError& e) {
    delegate_->seek(pos, callStatus, e);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::seekAsync(const int64_t& pos, SeekAsyncCallback callback) {
    return delegate_->seekAsync(pos, callback);
}
/**
 * Jump to the specified position in the current
                       If the
 *  position is not within range of the current track,
                       do
 *  nothing
         Note: If CanSeek is false, this has no effect
 * @param pos Absolute position in microseconds
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::setPosition(const uint64_t& pos, CommonAPI::CallStatus& callStatus, Player::PlayerError& e) {
    delegate_->setPosition(pos, callStatus, e);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::setPositionAsync(const uint64_t& pos, SetPositionAsyncCallback callback) {
    return delegate_->setPositionAsync(pos, callback);
}

template <typename ... _AttributeExtensions>
std::string PlayerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
const std::string& PlayerProxy<_AttributeExtensions...>::getDomain() const {
    return delegate_->getDomain();
}

template <typename ... _AttributeExtensions>
const std::string& PlayerProxy<_AttributeExtensions...>::getServiceId() const {
    return delegate_->getServiceId();
}

template <typename ... _AttributeExtensions>
const std::string& PlayerProxy<_AttributeExtensions...>::getInstanceId() const {
    return delegate_->getInstanceId();
}

template <typename ... _AttributeExtensions>
bool PlayerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool PlayerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& PlayerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& PlayerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}

        

} // namespace MediaManager
} // namespace genivi
} // namespace org

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyFactoryHelper<org::genivi::MediaManager::PlayerProxy,
    _AttributeExtension> {
    typedef typename org::genivi::MediaManager::PlayerProxy<
            org::genivi::MediaManager::PlayerExtensions::MuteAttributeExtension<_AttributeExtension>, 
            org::genivi::MediaManager::PlayerExtensions::ShuffleAttributeExtension<_AttributeExtension>, 
            org::genivi::MediaManager::PlayerExtensions::RepeatAttributeExtension<_AttributeExtension>, 
            org::genivi::MediaManager::PlayerExtensions::RateAttributeExtension<_AttributeExtension>, 
            org::genivi::MediaManager::PlayerExtensions::VolumeAttributeExtension<_AttributeExtension>, 
            org::genivi::MediaManager::PlayerExtensions::CanGoNextAttributeExtension<_AttributeExtension>, 
            org::genivi::MediaManager::PlayerExtensions::CanGoPreviousAttributeExtension<_AttributeExtension>, 
            org::genivi::MediaManager::PlayerExtensions::CanPauseAttributeExtension<_AttributeExtension>, 
            org::genivi::MediaManager::PlayerExtensions::CanPlayAttributeExtension<_AttributeExtension>, 
            org::genivi::MediaManager::PlayerExtensions::CanSeekAttributeExtension<_AttributeExtension>, 
            org::genivi::MediaManager::PlayerExtensions::CurrentTrackAttributeExtension<_AttributeExtension>, 
            org::genivi::MediaManager::PlayerExtensions::PlaybackStatusAttributeExtension<_AttributeExtension>, 
            org::genivi::MediaManager::PlayerExtensions::PositionAttributeExtension<_AttributeExtension>
    > class_t;
};
}

#endif // ORG_GENIVI_MEDIAMANAGER_Player_PROXY_H_
