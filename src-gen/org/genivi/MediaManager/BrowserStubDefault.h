/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.
* Used org.franca.core 0.8.9.
*
* 
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Browser_STUB_DEFAULT_H_
#define ORG_GENIVI_MEDIAMANAGER_Browser_STUB_DEFAULT_H_

#include <org/genivi/MediaManager/BrowserStub.h>
#include <sstream>

namespace org {
namespace genivi {
namespace MediaManager {

/**
 * Provides a default implementation for BrowserStubRemoteEvent and
 * BrowserStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class BrowserStubDefault : public BrowserStub {
 public:
    BrowserStubDefault();

    BrowserStubRemoteEvent* initStubAdapter(const std::shared_ptr<BrowserStubAdapter>& stubAdapter);


    /**
     * List all containers below the given path.
             returns: A JSON list of all
     *  containers with the given path as parent
             errors: NO_CONNECTION if no
     *  connection can be established to underlying
                      browsing engine
    
     *                   BAD_PATH if path parameter is invalid
     * @param path The path to search for containers. The format of the path
                   
     *  depends on the underlying browsing backend
     * @param offset: The offset to use for indexing the results list
     * @param count: The number of results to return, starting from offset
     * @param filter: Array of keys to include in resulting JSON elements
     */
    virtual void listContainers(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string path, uint64_t offset, uint64_t count, std::vector<std::string> filter, std::string& containers, Browser::BrowserError& e);
    virtual void listContainers(std::string path, uint64_t offset, uint64_t count, std::vector<std::string> filter, std::string& containers, Browser::BrowserError& e);

    /**
     * Extends ListContainers with sorting capabilities
     * @param sortKey Key to sort JSON result list on
     */
    virtual void listContainersEx(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string path, uint64_t offset, uint64_t count, std::vector<std::string> filter, Browser::SortKey sortKey, std::string& containers, Browser::BrowserError& e);
    virtual void listContainersEx(std::string path, uint64_t offset, uint64_t count, std::vector<std::string> filter, Browser::SortKey sortKey, std::string& containers, Browser::BrowserError& e);

    /**
     * List all items in the given container
             returns: A JSON list of all
     *  items with the given container as parent
             errors: NO_CONNECTION if no
     *  connection can be established to underlying
                      browsing engine
    
     *                   BAD_PATH if path parameter is invalid
     * @param path The path of the container to search for items.
                    The format
     *  of the path depends on the underlying browsing
                    backend
     * @param offset: The offset to use for indexing the results list
     * @param count: The number of results to return, starting from offset
     * @param filter: Array of keys to include in resulting JSON elements
     */
    virtual void listItems(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string path, uint64_t offset, uint64_t count, std::vector<std::string> filter, std::string& items, Browser::BrowserError& e);
    virtual void listItems(std::string path, uint64_t offset, uint64_t count, std::vector<std::string> filter, std::string& items, Browser::BrowserError& e);

    /**
     * Extends ListItems with sorting capabilities
     * @param sortKey Key to sort JSON result list on
     */
    virtual void listItemsEx(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string path, uint64_t offset, uint64_t count, std::vector<std::string> filter, Browser::SortKey sortKey, std::string& items, Browser::BrowserError& e);
    virtual void listItemsEx(std::string path, uint64_t offset, uint64_t count, std::vector<std::string> filter, Browser::SortKey sortKey, std::string& items, Browser::BrowserError& e);

    /**
     * List all children in the given container
             returns: A JSON list of all
     *  children with the given container as parent
             errors: NO_CONNECTION if
     *  no connection can be established to underlying
                      browsing
     *  engine
                      BAD_PATH if path parameter is invalid
     * @param path The path of the container to search for children.
                    The
     *  format of the path depends on the underlying browsing
                    backend
     * @param offset: The offset to use for indexing the results list
     * @param count: The number of results to return, starting from offset
     * @param filter: Array of keys to include in resulting JSON elements
     */
    virtual void listChildren(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string path, uint64_t offset, uint64_t count, std::vector<std::string> filter, std::string& children, Browser::BrowserError& e);
    virtual void listChildren(std::string path, uint64_t offset, uint64_t count, std::vector<std::string> filter, std::string& children, Browser::BrowserError& e);

    /**
     * Extends ListChildren with sorting capabilities
     * @param sortKey Key to sort JSON result list on
     */
    virtual void listChildrenEx(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string path, uint64_t offset, uint64_t count, std::vector<std::string> filter, Browser::SortKey sortKey, std::string& children, Browser::BrowserError& e);
    virtual void listChildrenEx(std::string path, uint64_t offset, uint64_t count, std::vector<std::string> filter, Browser::SortKey sortKey, std::string& children, Browser::BrowserError& e);

    /**
     * Search for children in the given container
             returns: A JSON list of all
     *  children matching the search criteria with
                       the given
     *  container as parent
             errors: NO_CONNECTION if no connection can be
     *  established to underlying
                      browsing engine
                     
     *  BAD_PATH if path parameter is invalid
     * @param path The path of the container to search for children.
                    The
     *  format of the path depends on the underlying browsing
                    backend
     * @param query Search query to match children against. The format of the
                   
     *  query depends on the underlying browsing backend
     * @param offset: The offset to use for indexing the results list
     * @param count: The number of results to return, starting from offset
     * @param filter: Array of keys to include in resulting JSON elements
     */
    virtual void searchObjects(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string path, std::string query, uint64_t offset, uint64_t count, std::vector<std::string> filter, std::string& objects, Browser::BrowserError& e);
    virtual void searchObjects(std::string path, std::string query, uint64_t offset, uint64_t count, std::vector<std::string> filter, std::string& objects, Browser::BrowserError& e);

    /**
     * Extends SearchObjects with sorting capabilities
     * @param sortKey Key to sort JSON result list on
     */
    virtual void searchObjectsEx(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string path, std::string query, uint64_t offset, uint64_t count, std::vector<std::string> filter, Browser::SortKey sortKey, std::string& objects, Browser::BrowserError& e);
    virtual void searchObjectsEx(std::string path, std::string query, uint64_t offset, uint64_t count, std::vector<std::string> filter, Browser::SortKey sortKey, std::string& objects, Browser::BrowserError& e);

    /**
     * Get a list of all initial letters and their index in the
                         
     *  given container
             returns: A JSON list of tuples of initial letters and
     *  their first
                       observed position when sorting according to
     *  sortKey
             errors: NO_CONNECTION if no connection can be established to
     *  underlying
                      browsing engine
                      BAD_PATH if
     *  path parameter is invalid
     * @param container: Container to build index list for
     * @param count: How many (unsorted) items should be traversed to build
                     
     *         index
     * @param filter: List of initial letters to include
     * @param sortKey: Key to sort on when building index list
     */
    virtual void listIndexes(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string container, uint64_t count, std::vector<std::string> filter, Browser::SortKey sortKey, std::string& indexes, Browser::BrowserError& e);
    virtual void listIndexes(std::string container, uint64_t count, std::vector<std::string> filter, Browser::SortKey sortKey, std::string& indexes, Browser::BrowserError& e);

    /**
     * Create a new empty container with path used as root
             returns: Path
     *  identifier for the newly created container
             errors: NO_CONNECTION if
     *  no connection can be established to underlying
                      browsing
     *  engine
                      BAD_PATH if path parameter is invalid
     * @param path: Path to place the newly created container in
     * @param displayName: Display name for the new container
     * @param childTypes: Array of allowed types on children in new container
     */
    virtual void createContainer(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string path, std::string displayName, std::vector<std::string> childTypes, std::string& pathIdentifier, Browser::BrowserError& e);
    virtual void createContainer(std::string path, std::string displayName, std::vector<std::string> childTypes, std::string& pathIdentifier, Browser::BrowserError& e);

    /**
     * Place a reference in a container, pointing to an object
             returns: Path
     *  identifier for the container containing the reference
             errors:
     *  NO_CONNECTION if no connection can be established to underlying
                  
     *     browsing engine
                      BAD_PATH if path parameter is invalid
     * @param path: Path to place the newly created container in
     * @param objectPath: Path to object to create reference to
     */
    virtual void createReference(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string path, std::string objectPath, std::string& pathIdentifier, Browser::BrowserError& e);
    virtual void createReference(std::string path, std::string objectPath, std::string& pathIdentifier, Browser::BrowserError& e);


    

 protected:
    std::shared_ptr<BrowserStubAdapter> stubAdapter_;
 private:
    class RemoteEventHandler: public BrowserStubRemoteEvent {
     public:
        RemoteEventHandler(BrowserStubDefault* defaultStub);


     private:
        BrowserStubDefault* defaultStub_;
    };

    RemoteEventHandler remoteEventHandler_;

};

} // namespace MediaManager
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_MEDIAMANAGER_Browser_STUB_DEFAULT_H_
