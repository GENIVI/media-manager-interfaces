/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.
* Used org.franca.core 0.8.9.
*
* 
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Player_DBUS_STUB_ADAPTER_H_
#define ORG_GENIVI_MEDIAMANAGER_Player_DBUS_STUB_ADAPTER_H_

#include <org/genivi/mediamanager/PlayerStub.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusStubAdapterHelper.h>
#include <CommonAPI/DBus/DBusStubAdapter.h>
#include <CommonAPI/DBus/DBusFactory.h>
#include <CommonAPI/DBus/DBusServicePublisher.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace mediamanager {

typedef CommonAPI::DBus::DBusStubAdapterHelper<PlayerStub> PlayerDBusStubAdapterHelper;

class PlayerDBusStubAdapter: public PlayerStubAdapter, public PlayerDBusStubAdapterHelper {
 public:
    PlayerDBusStubAdapter(
            const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
            const std::string& commonApiAddress,
            const std::string& dbusInterfaceName,
            const std::string& dbusBusName,
            const std::string& dbusObjectPath,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
            const std::shared_ptr<CommonAPI::StubBase>& stub);

    ~PlayerDBusStubAdapter();

    /**
     * Mute or unmute audio. When muted, the player backend will
                         
     *  not produce any audio output.
     */
    void fireMuteAttributeChanged(const PlayerTypes::MuteStatus& value);
    /**
     * Shuffle or unshuffle the current play queue. Shuffling,
                      
     *  un-shuffling and then re-shuffling will yield two different
                      
     *  shufflings (which are not guaranteed to be different)
     */
    void fireShuffleAttributeChanged(const PlayerTypes::ShuffleStatus& value);
    /**
     * Toggle repeat for the current playlist. If enabled,
                         
     *  playback will continue with the first item of the current
                        
     *   play queue when the last item has finished playing
     */
    void fireRepeatAttributeChanged(const PlayerTypes::RepeatStatus& value);
    /**
     * Set the playback rate
     */
    void fireRateAttributeChanged(const PlayerTypes::RateStatus& value);
    /**
     * Get or set volume, 0 is muted, and 1.0 means maximum
                         
     *  volume. Values outside this range will be capped
     */
    void fireVolumeAttributeChanged(const double& value);
    /**
     * Indicates whether Next() is available
     */
    void fireCanGoNextAttributeChanged(const bool& value);
    /**
     * Indicates whether Previous() is available
     */
    void fireCanGoPreviousAttributeChanged(const bool& value);
    /**
     * Indicates whether Pause() is available
     */
    void fireCanPauseAttributeChanged(const bool& value);
    /**
     * Indicates whether Play() is available
     */
    void fireCanPlayAttributeChanged(const bool& value);
    /**
     * Indicates whether Seek and SetPosition() are available
     */
    void fireCanSeekAttributeChanged(const bool& value);
    /**
     * Indicates the index in the play queue of the currently
                         
     *  playing track
     */
    void fireCurrentTrackAttributeChanged(const uint64_t& value);
    /**
     * Indicates current playback status
     */
    void firePlaybackStatusAttributeChanged(const PlayerTypes::PlaybackStatus& value);
    /**
     * Indicates duration of the current track
     */
    void fireDurationAttributeChanged(const uint64_t& value);

    

    const StubDispatcherTable& getStubDispatcherTable();
    
    void deactivateManagedInstances();

 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;
    
  private:
};

} // namespace mediamanager
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_MEDIAMANAGER_Player_DBUS_STUB_ADAPTER_H_
