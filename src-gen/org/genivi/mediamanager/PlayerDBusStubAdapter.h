/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core Unknown.
* Used org.franca.core Unknown.
*
* 
*/
#ifndef ORG_GENIVI_MEDIAMANAGER_Player_DBUS_STUB_ADAPTER_H_
#define ORG_GENIVI_MEDIAMANAGER_Player_DBUS_STUB_ADAPTER_H_

#include <org/genivi/mediamanager/PlayerStub.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusStubAdapterHelper.h>
#include <CommonAPI/DBus/DBusStubAdapter.h>
#include <CommonAPI/DBus/DBusFactory.h>
#include <CommonAPI/DBus/DBusServicePublisher.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace mediamanager {

typedef CommonAPI::DBus::DBusStubAdapterHelper<PlayerStub> PlayerDBusStubAdapterHelper;

class PlayerDBusStubAdapterInternal: public virtual PlayerStubAdapter, public PlayerDBusStubAdapterHelper {
 public:
    PlayerDBusStubAdapterInternal(
            const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
            const std::string& commonApiAddress,
            const std::string& dbusInterfaceName,
            const std::string& dbusBusName,
            const std::string& dbusObjectPath,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
            const std::shared_ptr<CommonAPI::StubBase>& stub);

    ~PlayerDBusStubAdapterInternal();

    virtual const bool hasFreedesktopProperties();

    /**
     * Mute or unmute audio. When muted, the player backend will
                         
     *  not produce any audio output.
     */
    void fireMuteAttributeChanged(const PlayerTypes::MuteStatus& value);
    /**
     * Shuffle or unshuffle the current play queue. Shuffling,
                      
     *  un-shuffling and then re-shuffling will yield two different
                      
     *  shufflings (which are not guaranteed to be different)
     */
    void fireShuffleAttributeChanged(const PlayerTypes::ShuffleStatus& value);
    /**
     * Toggle repeat for the current playlist. If enabled,
                         
     *  playback will continue with the first item of the current
                        
     *   play queue when the last item has finished playing
     */
    void fireRepeatAttributeChanged(const PlayerTypes::RepeatStatus& value);
    /**
     * Set the playback rate
     */
    void fireRateAttributeChanged(const double& value);
    /**
     * Get or set volume, 0 is muted, and 1.0 means maximum
                         
     *  volume. Values outside this range will be capped
     */
    void fireVolumeAttributeChanged(const double& value);
    /**
     * Indicates whether Next() is available
     */
    void fireCanGoNextAttributeChanged(const bool& value);
    /**
     * Indicates whether Previous() is available
     */
    void fireCanGoPreviousAttributeChanged(const bool& value);
    /**
     * Indicates whether Pause() is available
     */
    void fireCanPauseAttributeChanged(const bool& value);
    /**
     * Indicates whether Play() is available
     */
    void fireCanPlayAttributeChanged(const bool& value);
    /**
     * Indicates whether Seek and SetPosition() are available
     */
    void fireCanSeekAttributeChanged(const bool& value);
    /**
     * Indicates the index in the play queue of the currently
                         
     *  playing track
     */
    void fireCurrentTrackAttributeChanged(const uint64_t& value);
    /**
     * Indicates current playback status
     */
    void firePlaybackStatusAttributeChanged(const PlayerTypes::PlaybackStatus& value);
    /**
     * Indicates duration of the current track
     */
    void fireDurationAttributeChanged(const uint64_t& value);



    const PlayerDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();


static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PlayerStub,
        CommonAPI::Version
        > getPlayerInterfaceVersionStubDispatcher;

/**
 * Mute or unmute audio. When muted, the player backend will
                     
 *  not produce any audio output.
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PlayerStub,
        PlayerTypes::MuteStatus
        > getMuteAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        PlayerStub,
        PlayerTypes::MuteStatus
        > setMuteAttributeStubDispatcher;
/**
 * Shuffle or unshuffle the current play queue. Shuffling,
                  
 *  un-shuffling and then re-shuffling will yield two different
                  
 *  shufflings (which are not guaranteed to be different)
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PlayerStub,
        PlayerTypes::ShuffleStatus
        > getShuffleAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        PlayerStub,
        PlayerTypes::ShuffleStatus
        > setShuffleAttributeStubDispatcher;
/**
 * Toggle repeat for the current playlist. If enabled,
                     
 *  playback will continue with the first item of the current
                    
 *   play queue when the last item has finished playing
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PlayerStub,
        PlayerTypes::RepeatStatus
        > getRepeatAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        PlayerStub,
        PlayerTypes::RepeatStatus
        > setRepeatAttributeStubDispatcher;
/**
 * Set the playback rate
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PlayerStub,
        double
        > getRateAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        PlayerStub,
        double
        > setRateAttributeStubDispatcher;
/**
 * Get or set volume, 0 is muted, and 1.0 means maximum
                     
 *  volume. Values outside this range will be capped
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PlayerStub,
        double
        > getVolumeAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        PlayerStub,
        double
        > setVolumeAttributeStubDispatcher;
/**
 * Indicates whether Next() is available
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PlayerStub,
        bool
        > getCanGoNextAttributeStubDispatcher;
/**
 * Indicates whether Previous() is available
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PlayerStub,
        bool
        > getCanGoPreviousAttributeStubDispatcher;
/**
 * Indicates whether Pause() is available
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PlayerStub,
        bool
        > getCanPauseAttributeStubDispatcher;
/**
 * Indicates whether Play() is available
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PlayerStub,
        bool
        > getCanPlayAttributeStubDispatcher;
/**
 * Indicates whether Seek and SetPosition() are available
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PlayerStub,
        bool
        > getCanSeekAttributeStubDispatcher;
/**
 * Indicates the index in the play queue of the currently
                     
 *  playing track
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PlayerStub,
        uint64_t
        > getCurrentTrackAttributeStubDispatcher;
/**
 * Indicates current playback status
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PlayerStub,
        PlayerTypes::PlaybackStatus
        > getPlaybackStatusAttributeStubDispatcher;
/**
 * Indicates current position in the currently playing
                      track
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PlayerStub,
        uint64_t
        > getPositionAttributeStubDispatcher;
/**
 * Indicates duration of the current track
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PlayerStub,
        uint64_t
        > getDurationAttributeStubDispatcher;


/**
 * Skip to the next track in the play queue. If there is no
                      
 *  next track, playback is stopped. If playback is paused or
                    
 *    stopped, this function will set the next plack to be
                      
 *  played once playback is activated
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PlayerStub,
    std::tuple<>,
    std::tuple<PlayerTypes::PlayerError>
    > nextStubDispatcher;
/**
 * Open the supplied Uri for playback in the playback engine.
         returns:
 *  INVALID_URI When an invalid URI is supplied
                              
 *  (decided by playback engine)
                   NO_ERROR    On success
 * @param uri URI of media to play, uri format is decided by backend
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PlayerStub,
    std::tuple<std::string>,
    std::tuple<PlayerTypes::PlayerError>
    > openUriStubDispatcher;
/**
 * Enqueue the supplied Uri for playback in the playback engine.
         returns:
 *  INVALID_URI When an invalid URI is supplied
                              
 *  (decided by playback engine)
                  NO_ERROR    On success
 * @param uri URI of media to enqueue, uri format is decided by backend
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PlayerStub,
    std::tuple<std::string>,
    std::tuple<PlayerTypes::PlayerError>
    > enqueueUriStubDispatcher;
/**
 * Dequeue the item with the supplied index in the playback
                     
 *  engine.
 * @param pos index of media to dequeue
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PlayerStub,
    std::tuple<uint64_t>,
    std::tuple<PlayerTypes::PlayerError>
    > dequeueIndexStubDispatcher;
/**
 * Retrieve the current play queue in JSON format
         returns: Current play
 *  queue in JSON format
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PlayerStub,
    std::tuple<>,
    std::tuple<std::string, PlayerTypes::PlayerError>
    > getCurrentPlayQueueStubDispatcher;
/**
 * Dequeue all elements, emptying the play queue
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PlayerStub,
    std::tuple<>,
    std::tuple<PlayerTypes::PlayerError>
    > dequeueAllStubDispatcher;
/**
 * Use the supplied playlist as the current play queue. If
                     
 *  the play queue is invalid, the old play queue is
                     
 *  untouched.
         returns: BAD_PLAYLIST If playlist can not be loaded
      
 *              NO_ERROR     On success
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PlayerStub,
    std::tuple<std::string>,
    std::tuple<PlayerTypes::PlayerError>
    > openPlaylistStubDispatcher;
/**
 * Pause playback in the playback engine.
                       If already
 *  paused, this has no effect
                       Note: If CanPause is false,
 *  this has no effect
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PlayerStub,
    std::tuple<>,
    std::tuple<PlayerTypes::PlayerError>
    > pauseStubDispatcher;
/**
 * Start or resume playback in the playback engine.
                       If
 *  playback is already commencing, this has not effect.
                       If
 *  paused, playback resumes from the current position.
                       If
 *  there is no track to play, calling this has no effect
                      
 *  Note: If CanPlay is false, this has no effect
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PlayerStub,
    std::tuple<>,
    std::tuple<PlayerTypes::PlayerError>
    > playStubDispatcher;
/**
 * Starts playback (see Play) if paused
                      Pauses playback (see
 *  Pause) is playing
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PlayerStub,
    std::tuple<>,
    std::tuple<PlayerTypes::PlayerError>
    > playPauseStubDispatcher;
/**
 * Loads previous track in play queue
                      If there is no
 *  previous track, playback is stopped
                      If playback is
 *  stopped or paused, it remains this way,
                      but the next
 *  track to be played will the set
                      by this function
       
 *                Note: If CanGoPrevious is false, this has no effect
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PlayerStub,
    std::tuple<>,
    std::tuple<PlayerTypes::PlayerError>
    > previousStubDispatcher;
/**
 * Seek relatively in the current track
                      If a negative seek
 *  leads to a play position less than 0,
                      the play position
 *  will be set to 0.
                      If a positive seek leads outside the
 *  length of the current
                      track, this is treated like a call
 *  to Next()
                      Note: If CanSeek is false, this has no effect
 * @param pos Relative seek amount in microseconds
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PlayerStub,
    std::tuple<int64_t>,
    std::tuple<PlayerTypes::PlayerError>
    > seekStubDispatcher;
/**
 * Jump to the specified position in the current
                       If the
 *  position is not within range of the current track,
                       do
 *  nothing
         Note: If CanSeek is false, this has no effect
 * @param pos Absolute position in microseconds
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PlayerStub,
    std::tuple<uint64_t>,
    std::tuple<PlayerTypes::PlayerError>
    > setPositionStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    PlayerDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class PlayerDBusStubAdapter: public PlayerDBusStubAdapterInternal, public std::enable_shared_from_this<PlayerDBusStubAdapter> {
public:
    PlayerDBusStubAdapter(
                         const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                         const std::string& commonApiAddress,
                         const std::string& dbusInterfaceName,
                         const std::string& dbusBusName,
                         const std::string& dbusObjectPath,
                         const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
                         const std::shared_ptr<CommonAPI::StubBase>& stub) :
            CommonAPI::DBus::DBusStubAdapter(
                            factory,
                            commonApiAddress,
                            dbusInterfaceName,
                            dbusBusName,
                            dbusObjectPath,
                            dbusConnection,
                            false),
            PlayerDBusStubAdapterInternal(
                            factory,
                            commonApiAddress,
                            dbusInterfaceName,
                            dbusBusName,
                            dbusObjectPath,
                            dbusConnection,
                            stub) { }
};

} // namespace mediamanager
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_MEDIAMANAGER_Player_DBUS_STUB_ADAPTER_H_
