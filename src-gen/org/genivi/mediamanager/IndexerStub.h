/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.
* Used org.franca.core 0.8.9.
*
* 
*/
/**
 * Indexer control interface. Allows administerial tasks for
                  the
 *  indexer backend, such as starting, stopping and requesting
                 
 *  status of the indexer.
                  For querying the database, please
 *  see
                  org.genivi.mediamanager.Browser
 */
#ifndef ORG_GENIVI_MEDIAMANAGER_Indexer_STUB_H_
#define ORG_GENIVI_MEDIAMANAGER_Indexer_STUB_H_



#include <org/genivi/mediamanager/MediaTypes.h>

#include "Indexer.h"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <cstdint>
#include <vector>

#include <CommonAPI/Stub.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace mediamanager {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Indexer. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class IndexerStubAdapter: virtual public CommonAPI::StubAdapter, public Indexer {
 public:
    ///Notifies all remote listeners about a change of value of the attribute indexerStatus.
    virtual void fireIndexerStatusAttributeChanged(const Indexer::IndexerStatus& indexerStatus) = 0;

    
    
    virtual void deactivateManagedInstances() = 0;
    
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};


/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Indexer.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class IndexerStubRemoteEvent {
 public:
    virtual ~IndexerStubRemoteEvent() { }


};


/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Indexer to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class IndexerStub : public CommonAPI::Stub<IndexerStubAdapter , IndexerStubRemoteEvent> {
 public:
    virtual ~IndexerStub() { }

    /**
     * Get the current status of the indexer.
     */
    /// Provides getter access to the attribute indexerStatus
    virtual const Indexer::IndexerStatus& getIndexerStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * Get the path to the database file in the host file system.
                        
     *   This is the database file used by LMS to store metadata
     * @param output: Path to database file in host file system
     * @deprecated This is only used for testing purposes and will be removed
     */
    /// This is the method that will be called on remote calls on the method getDatabasePath.
    virtual void getDatabasePath(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string& output, Indexer::IndexerError& e) = 0;
    /**
     * If the indexer is currently IDLE or RUNNING
                          (see
     *  IndexerStatus), stop indexing and set IndexerStatus
                          to
     *  STOPPED.
                          If indexer is currently STOPPED, no action is
     *  taken
     */
    /// This is the method that will be called on remote calls on the method stopIndexing.
    virtual void stopIndexing(const std::shared_ptr<CommonAPI::ClientId> clientId, Indexer::IndexerError& e) = 0;
    /**
     * If indexer is currently STOPPED (see IndexerStatus),
                         
     *  status is changed to RUNNING and indexing is RUNNING. If
                         
     *  the status is IDLE or RUNNING, no action is taken.
                          Note
     *  that the status may go from RUNNING to IDLE directly
                         
     *  after issuing this call, if no files are to be indexed
     */
    /// This is the method that will be called on remote calls on the method startIndexing.
    virtual void startIndexing(const std::shared_ptr<CommonAPI::ClientId> clientId, Indexer::IndexerError& e) = 0;
    
};

} // namespace mediamanager
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_MEDIAMANAGER_Indexer_STUB_H_
