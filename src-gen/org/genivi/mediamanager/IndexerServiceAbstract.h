/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core Unknown.
* Used org.franca.core Unknown.
*
* 
*/
/**
 * Indexer control interface. Allows administerial tasks for
                  the
 *  indexer backend, such as starting, stopping and requesting
                 
 *  status of the indexer.
                  For querying the database, please
 *  see
                  org.genivi.mediamanager.Browser
 */
#pragma once

#include <org/genivi/mediamanager/IndexerStub.h>
#include <sstream>
#include <assert.h>

namespace org {
namespace genivi {
namespace mediamanager {

/**
 * Provides an abstract implementation for IndexerStub.
 * That abstract class is suitable if your service ignores which client is interactng with it.
 * All the methods and attribute getters/setters are pure virtual, which ensures that any change in the interface
 * definition will likely cause a compile error in the service implementation.
 */
class IndexerServiceAbstract : public IndexerStub {
 public:
    IndexerServiceAbstract() :
        remoteEventHandler_(this), interfaceVersion_(Indexer::getInterfaceVersion()) {
}

    IndexerStubRemoteEvent* initStubAdapter(const std::shared_ptr<IndexerStubAdapter>& stubAdapter) {
    stubAdapters_.push_back(stubAdapter);
    return &remoteEventHandler_;
}


virtual const Indexer::IndexerStatus& getIndexerStatusAttribute() = 0 ;

void fireIndexerStatusAttributeChangedNotification() {
    for (auto& stubAdapter_ : stubAdapters_)
	                stubAdapter_->fireIndexerStatusAttributeChanged(getIndexerStatusAttribute());
}

const Indexer::IndexerStatus& getIndexerStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    return getIndexerStatusAttribute();
}



/**
 * Get the path to the database file in the host file system.
                    
 *   This is the database file used by LMS to store metadata
 * @param output: Path to database file in host file system
 * @deprecated This is only used for testing purposes and will be removed
 */
virtual void getDatabasePath(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string& output, Indexer::IndexerError& e) {
    // Call old style methods in default 
    return getDatabasePath(output, e);
}
virtual void getDatabasePath(std::string& output, Indexer::IndexerError& e) = 0;

/**
 * If the indexer is currently IDLE or RUNNING
                      (see
 *  IndexerStatus), stop indexing and set IndexerStatus
                      to
 *  STOPPED.
                      If indexer is currently STOPPED, no action is
 *  taken
 */
virtual void stopIndexing(const std::shared_ptr<CommonAPI::ClientId> clientId, Indexer::IndexerError& e) {
    // Call old style methods in default 
    return stopIndexing(e);
}
virtual void stopIndexing(Indexer::IndexerError& e) = 0;

/**
 * If indexer is currently STOPPED (see IndexerStatus),
                     
 *  status is changed to RUNNING and indexing is RUNNING. If
                     
 *  the status is IDLE or RUNNING, no action is taken.
                      Note
 *  that the status may go from RUNNING to IDLE directly
                     
 *  after issuing this call, if no files are to be indexed
 */
virtual void startIndexing(const std::shared_ptr<CommonAPI::ClientId> clientId, Indexer::IndexerError& e) {
    // Call old style methods in default 
    return startIndexing(e);
}
virtual void startIndexing(Indexer::IndexerError& e) = 0;




 protected:
    /**
     * Get the current status of the indexer.
     */
    std::vector<std::shared_ptr<IndexerStubAdapter>> stubAdapters_;
 private:
    class RemoteEventHandler: public IndexerStubRemoteEvent {
     public:
        RemoteEventHandler(IndexerServiceAbstract* defaultStub) :
        defaultStub_(defaultStub) {
}

        /**
         * Get the current status of the indexer.
         */


     private:
        IndexerServiceAbstract* defaultStub_;
    };

    RemoteEventHandler remoteEventHandler_;

    CommonAPI::Version interfaceVersion_;

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) override {
    	return interfaceVersion_;
   	}

};

} // namespace mediamanager
} // namespace genivi
} // namespace org

