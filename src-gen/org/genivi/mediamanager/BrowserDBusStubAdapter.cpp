/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core Unknown.
* Used org.franca.core Unknown.
*
* 
*/
#include "BrowserDBusStubAdapter.h"
#include <org/genivi/mediamanager/Browser.h>

namespace org {
namespace genivi {
namespace mediamanager {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createBrowserDBusStubAdapter(
                   const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<BrowserDBusStubAdapter>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

INITIALIZER(registerBrowserDBusStubAdapter) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(Browser::getInterfaceId(),
                                                               &createBrowserDBusStubAdapter);
}



BrowserDBusStubAdapterInternal::~BrowserDBusStubAdapterInternal() {
    deactivateManagedInstances();
    BrowserDBusStubAdapterHelper::deinit();
}

void BrowserDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* BrowserDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * Return a list of all media manager identifiers. These are
                 used to
         *  indicate which media manager we should interact with.
                 returns: A list
         *  of all media managers found
         */
        "<method name=\"discoverMediaManagers\">\n"
            "<arg name=\"identifiers\" type=\"as\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * List all containers below the given path.
                 returns: ResultMapList of
         *  all containers with the given path as parent.
                 	   	  See
         *  MediaTypes.fidl for a list of allowed keys.
                 errors: NO_CONNECTION if
         *  no connection can be established to underlying
                         browsing
         *  engine
                         BAD_PATH if path parameter is invalid
         * @param path The path to search for containers. The format of the path
                       
         *  depends on the underlying browsing backend
         * @param offset: The offset to use for indexing the results list
         * @param count: The number of results to return, starting from offset
         * @param filter: Array of keys to include in resulting ResultMapList
         */
        "<method name=\"listContainers\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Extends ListContainers with sorting capabilities
         * @param sortKey Key to sort ResultMapList on
         */
        "<method name=\"listContainersEx\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"sortKey\" type=\"(is)\" direction=\"in\" />\n"
            "<arg name=\"m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * List all items in the given container
                 returns: A ResultMapList of all
         *  items with the given container as parent.
                 		  See MediaTypes.fidl for
         *  a list of allowed keys.
                 errors: NO_CONNECTION if no connection can be
         *  established to underlying
                         browsing engine
                        
         *  BAD_PATH if path parameter is invalid
         * @param path The path of the container to search for items.
                        The format
         *  of the path depends on the underlying browsing
                        backend
         * @param offset: The offset to use for indexing the results list
         * @param count: The number of results to return, starting from offset
         * @param filter: Array of keys to include in resulting ResultMapList
         */
        "<method name=\"listItems\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Extends ListItems with sorting capabilities
         * @param sortKey Key to sort ResultMapList
         */
        "<method name=\"listItemsEx\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"sortKey\" type=\"(is)\" direction=\"in\" />\n"
            "<arg name=\"m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * List all children in the given container
                 returns: A ResultMapList of
         *  all children with the given container as parent.
                 		  See
         *  MediaTypes.fidl for a list of allowed keys.
                 errors: NO_CONNECTION if
         *  no connection can be established to underlying
                          browsing
         *  engine
                          BAD_PATH if path parameter is invalid
         * @param path The path of the container to search for children.
                        The
         *  format of the path depends on the underlying browsing
                        backend
         * @param offset: The offset to use for indexing the results list
         * @param count: The number of results to return, starting from offset
         * @param filter: Array of keys to include in resulting ResultMapList
         */
        "<method name=\"listChildren\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Extends ListChildren with sorting capabilities
         * @param sortKey Key to sort ResultMapList on
         */
        "<method name=\"listChildrenEx\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"sortKey\" type=\"(is)\" direction=\"in\" />\n"
            "<arg name=\"m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Search for children in the given container
                 returns: A ResultMapList of
         *  all children matching the search criteria with
                           the given
         *  container as parent.See MediaTypes.fidl for a list of
                          
         *  allowed keys.
                 errors: NO_CONNECTION if no connection can be
         *  established to underlying
                         browsing engine
                        
         *  BAD_PATH if path parameter is invalid
         * @param path The path of the container to search for children.
                        The
         *  format of the path depends on the underlying browsing
                        backend
         * @param query Search query to match children against. The format of the
                       
         *  query depends on the underlying browsing backend
         * @param offset: The offset to use for indexing the results list
         * @param count: The number of results to return, starting from offset
         * @param filter: Array of keys to include in resulting ResultMapList
         */
        "<method name=\"searchObjects\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"query\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Extends SearchObjects with sorting capabilities
         * @param sortKey Key to sort ResultMapList on
         */
        "<method name=\"searchObjectsEx\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"query\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"sortKey\" type=\"(is)\" direction=\"in\" />\n"
            "<arg name=\"m\" type=\"aa{s(yv)}\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Get a list of all initial letters and their index in the
                             
         *  given container
                 returns: A list of tuples of initial letters and
         *  their first
                           observed position when sorting according to
         *  sortKey
                 errors: NO_CONNECTION if no connection can be established to
         *  underlying
                         browsing engine
                         BAD_PATH if path
         *  parameter is invalid
         * @param container: Container to build index list for
         * @param count: How many (unsorted) items should be traversed to build
                         
         *         index
         * @param filter: List of initial letters to include
         * @param sortKey: Key to sort on when building index list
         */
        "<method name=\"listIndexes\">\n"
            "<arg name=\"container\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"sortKey\" type=\"(is)\" direction=\"in\" />\n"
            "<arg name=\"indexes\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Create a new empty container with path used as root
                 returns: Path
         *  identifier for the newly created container
                 errors: NO_CONNECTION if
         *  no connection can be established to underlying
                          browsing
         *  engine
                          BAD_PATH if path parameter is invalid
         * @param path: Path to place the newly created container in
         * @param displayName: Display name for the new container
         * @param childTypes: Array of allowed types on children in new container
         */
        "<method name=\"createContainer\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"displayName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"childTypes\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"pathIdentifier\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Place a reference in a container, pointing to an object
                 returns: Path
         *  identifier for the container containing the reference
                 errors:
         *  NO_CONNECTION if no connection can be established to underlying
                      
         *     browsing engine
                          BAD_PATH if path parameter is invalid
         * @param path: Path to place the newly created container in
         * @param objectPath: Path to object to create reference to
         */
        "<method name=\"createReference\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"objectPath\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"pathIdentifier\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        BrowserStub,
        CommonAPI::Version
        > BrowserDBusStubAdapterInternal::getBrowserInterfaceVersionStubDispatcher(&BrowserStub::getInterfaceVersion, "uu");



/**
 * Return a list of all media manager identifiers. These are
         used to
 *  indicate which media manager we should interact with.
         returns: A list
 *  of all media managers found
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<>,
    std::tuple<std::vector<std::string>, BrowserTypes::BrowserError>
    > BrowserDBusStubAdapterInternal::discoverMediaManagersStubDispatcher(&BrowserStub::discoverMediaManagers, "asi");
/**
 * List all containers below the given path.
         returns: ResultMapList of
 *  all containers with the given path as parent.
         	   	  See
 *  MediaTypes.fidl for a list of allowed keys.
         errors: NO_CONNECTION if
 *  no connection can be established to underlying
                 browsing
 *  engine
                 BAD_PATH if path parameter is invalid
 * @param path The path to search for containers. The format of the path
               
 *  depends on the underlying browsing backend
 * @param offset: The offset to use for indexing the results list
 * @param count: The number of results to return, starting from offset
 * @param filter: Array of keys to include in resulting ResultMapList
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<MediaTypes::ResultMapList, BrowserTypes::BrowserError>
    > BrowserDBusStubAdapterInternal::listContainersStubDispatcher(&BrowserStub::listContainers, "aa{s(yv)}i");
/**
 * Extends ListContainers with sorting capabilities
 * @param sortKey Key to sort ResultMapList on
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>, BrowserTypes::SortKey>,
    std::tuple<MediaTypes::ResultMapList, BrowserTypes::BrowserError>
    > BrowserDBusStubAdapterInternal::listContainersExStubDispatcher(&BrowserStub::listContainersEx, "aa{s(yv)}i");
/**
 * List all items in the given container
         returns: A ResultMapList of all
 *  items with the given container as parent.
         		  See MediaTypes.fidl for
 *  a list of allowed keys.
         errors: NO_CONNECTION if no connection can be
 *  established to underlying
                 browsing engine
                
 *  BAD_PATH if path parameter is invalid
 * @param path The path of the container to search for items.
                The format
 *  of the path depends on the underlying browsing
                backend
 * @param offset: The offset to use for indexing the results list
 * @param count: The number of results to return, starting from offset
 * @param filter: Array of keys to include in resulting ResultMapList
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<MediaTypes::ResultMapList, BrowserTypes::BrowserError>
    > BrowserDBusStubAdapterInternal::listItemsStubDispatcher(&BrowserStub::listItems, "aa{s(yv)}i");
/**
 * Extends ListItems with sorting capabilities
 * @param sortKey Key to sort ResultMapList
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>, BrowserTypes::SortKey>,
    std::tuple<MediaTypes::ResultMapList, BrowserTypes::BrowserError>
    > BrowserDBusStubAdapterInternal::listItemsExStubDispatcher(&BrowserStub::listItemsEx, "aa{s(yv)}i");
/**
 * List all children in the given container
         returns: A ResultMapList of
 *  all children with the given container as parent.
         		  See
 *  MediaTypes.fidl for a list of allowed keys.
         errors: NO_CONNECTION if
 *  no connection can be established to underlying
                  browsing
 *  engine
                  BAD_PATH if path parameter is invalid
 * @param path The path of the container to search for children.
                The
 *  format of the path depends on the underlying browsing
                backend
 * @param offset: The offset to use for indexing the results list
 * @param count: The number of results to return, starting from offset
 * @param filter: Array of keys to include in resulting ResultMapList
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<MediaTypes::ResultMapList, BrowserTypes::BrowserError>
    > BrowserDBusStubAdapterInternal::listChildrenStubDispatcher(&BrowserStub::listChildren, "aa{s(yv)}i");
/**
 * Extends ListChildren with sorting capabilities
 * @param sortKey Key to sort ResultMapList on
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>, BrowserTypes::SortKey>,
    std::tuple<MediaTypes::ResultMapList, BrowserTypes::BrowserError>
    > BrowserDBusStubAdapterInternal::listChildrenExStubDispatcher(&BrowserStub::listChildrenEx, "aa{s(yv)}i");
/**
 * Search for children in the given container
         returns: A ResultMapList of
 *  all children matching the search criteria with
                   the given
 *  container as parent.See MediaTypes.fidl for a list of
                  
 *  allowed keys.
         errors: NO_CONNECTION if no connection can be
 *  established to underlying
                 browsing engine
                
 *  BAD_PATH if path parameter is invalid
 * @param path The path of the container to search for children.
                The
 *  format of the path depends on the underlying browsing
                backend
 * @param query Search query to match children against. The format of the
               
 *  query depends on the underlying browsing backend
 * @param offset: The offset to use for indexing the results list
 * @param count: The number of results to return, starting from offset
 * @param filter: Array of keys to include in resulting ResultMapList
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<MediaTypes::ResultMapList, BrowserTypes::BrowserError>
    > BrowserDBusStubAdapterInternal::searchObjectsStubDispatcher(&BrowserStub::searchObjects, "aa{s(yv)}i");
/**
 * Extends SearchObjects with sorting capabilities
 * @param sortKey Key to sort ResultMapList on
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, std::string, uint64_t, uint64_t, std::vector<std::string>, BrowserTypes::SortKey>,
    std::tuple<MediaTypes::ResultMapList, BrowserTypes::BrowserError>
    > BrowserDBusStubAdapterInternal::searchObjectsExStubDispatcher(&BrowserStub::searchObjectsEx, "aa{s(yv)}i");
/**
 * Get a list of all initial letters and their index in the
                     
 *  given container
         returns: A list of tuples of initial letters and
 *  their first
                   observed position when sorting according to
 *  sortKey
         errors: NO_CONNECTION if no connection can be established to
 *  underlying
                 browsing engine
                 BAD_PATH if path
 *  parameter is invalid
 * @param container: Container to build index list for
 * @param count: How many (unsorted) items should be traversed to build
                 
 *         index
 * @param filter: List of initial letters to include
 * @param sortKey: Key to sort on when building index list
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, uint64_t, std::vector<std::string>, BrowserTypes::SortKey>,
    std::tuple<std::string, BrowserTypes::BrowserError>
    > BrowserDBusStubAdapterInternal::listIndexesStubDispatcher(&BrowserStub::listIndexes, "si");
/**
 * Create a new empty container with path used as root
         returns: Path
 *  identifier for the newly created container
         errors: NO_CONNECTION if
 *  no connection can be established to underlying
                  browsing
 *  engine
                  BAD_PATH if path parameter is invalid
 * @param path: Path to place the newly created container in
 * @param displayName: Display name for the new container
 * @param childTypes: Array of allowed types on children in new container
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, std::string, std::vector<std::string>>,
    std::tuple<std::string, BrowserTypes::BrowserError>
    > BrowserDBusStubAdapterInternal::createContainerStubDispatcher(&BrowserStub::createContainer, "si");
/**
 * Place a reference in a container, pointing to an object
         returns: Path
 *  identifier for the container containing the reference
         errors:
 *  NO_CONNECTION if no connection can be established to underlying
              
 *     browsing engine
                  BAD_PATH if path parameter is invalid
 * @param path: Path to place the newly created container in
 * @param objectPath: Path to object to create reference to
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, std::string>,
    std::tuple<std::string, BrowserTypes::BrowserError>
    > BrowserDBusStubAdapterInternal::createReferenceStubDispatcher(&BrowserStub::createReference, "si");





const BrowserDBusStubAdapterHelper::StubDispatcherTable& BrowserDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& BrowserDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

BrowserDBusStubAdapterInternal::BrowserDBusStubAdapterInternal(
        const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        CommonAPI::DBus::DBusStubAdapter(
                factory,
                commonApiAddress,
                dbusInterfaceName,
                dbusBusName,
                dbusObjectPath,
                dbusConnection,
                false),
        BrowserDBusStubAdapterHelper(
            factory,
            commonApiAddress,
            dbusInterfaceName,
            dbusBusName,
            dbusObjectPath,
            dbusConnection,
            std::dynamic_pointer_cast<BrowserStub>(stub),
            false),
        stubDispatcherTable_({
            /**
             * Return a list of all media manager identifiers. These are
                     used to
             *  indicate which media manager we should interact with.
                     returns: A list
             *  of all media managers found
             */
            { { "discoverMediaManagers", "" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::discoverMediaManagersStubDispatcher },
            /**
             * List all containers below the given path.
                     returns: ResultMapList of
             *  all containers with the given path as parent.
                     	   	  See
             *  MediaTypes.fidl for a list of allowed keys.
                     errors: NO_CONNECTION if
             *  no connection can be established to underlying
                             browsing
             *  engine
                             BAD_PATH if path parameter is invalid
             * @param path The path to search for containers. The format of the path
                           
             *  depends on the underlying browsing backend
             * @param offset: The offset to use for indexing the results list
             * @param count: The number of results to return, starting from offset
             * @param filter: Array of keys to include in resulting ResultMapList
             */
            { { "listContainers", "sttas" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::listContainersStubDispatcher },
            /**
             * Extends ListContainers with sorting capabilities
             * @param sortKey Key to sort ResultMapList on
             */
            { { "listContainersEx", "sttas(is)" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::listContainersExStubDispatcher },
            /**
             * List all items in the given container
                     returns: A ResultMapList of all
             *  items with the given container as parent.
                     		  See MediaTypes.fidl for
             *  a list of allowed keys.
                     errors: NO_CONNECTION if no connection can be
             *  established to underlying
                             browsing engine
                            
             *  BAD_PATH if path parameter is invalid
             * @param path The path of the container to search for items.
                            The format
             *  of the path depends on the underlying browsing
                            backend
             * @param offset: The offset to use for indexing the results list
             * @param count: The number of results to return, starting from offset
             * @param filter: Array of keys to include in resulting ResultMapList
             */
            { { "listItems", "sttas" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::listItemsStubDispatcher },
            /**
             * Extends ListItems with sorting capabilities
             * @param sortKey Key to sort ResultMapList
             */
            { { "listItemsEx", "sttas(is)" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::listItemsExStubDispatcher },
            /**
             * List all children in the given container
                     returns: A ResultMapList of
             *  all children with the given container as parent.
                     		  See
             *  MediaTypes.fidl for a list of allowed keys.
                     errors: NO_CONNECTION if
             *  no connection can be established to underlying
                              browsing
             *  engine
                              BAD_PATH if path parameter is invalid
             * @param path The path of the container to search for children.
                            The
             *  format of the path depends on the underlying browsing
                            backend
             * @param offset: The offset to use for indexing the results list
             * @param count: The number of results to return, starting from offset
             * @param filter: Array of keys to include in resulting ResultMapList
             */
            { { "listChildren", "sttas" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::listChildrenStubDispatcher },
            /**
             * Extends ListChildren with sorting capabilities
             * @param sortKey Key to sort ResultMapList on
             */
            { { "listChildrenEx", "sttas(is)" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::listChildrenExStubDispatcher },
            /**
             * Search for children in the given container
                     returns: A ResultMapList of
             *  all children matching the search criteria with
                               the given
             *  container as parent.See MediaTypes.fidl for a list of
                              
             *  allowed keys.
                     errors: NO_CONNECTION if no connection can be
             *  established to underlying
                             browsing engine
                            
             *  BAD_PATH if path parameter is invalid
             * @param path The path of the container to search for children.
                            The
             *  format of the path depends on the underlying browsing
                            backend
             * @param query Search query to match children against. The format of the
                           
             *  query depends on the underlying browsing backend
             * @param offset: The offset to use for indexing the results list
             * @param count: The number of results to return, starting from offset
             * @param filter: Array of keys to include in resulting ResultMapList
             */
            { { "searchObjects", "ssttas" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::searchObjectsStubDispatcher },
            /**
             * Extends SearchObjects with sorting capabilities
             * @param sortKey Key to sort ResultMapList on
             */
            { { "searchObjectsEx", "ssttas(is)" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::searchObjectsExStubDispatcher },
            /**
             * Get a list of all initial letters and their index in the
                                 
             *  given container
                     returns: A list of tuples of initial letters and
             *  their first
                               observed position when sorting according to
             *  sortKey
                     errors: NO_CONNECTION if no connection can be established to
             *  underlying
                             browsing engine
                             BAD_PATH if path
             *  parameter is invalid
             * @param container: Container to build index list for
             * @param count: How many (unsorted) items should be traversed to build
                             
             *         index
             * @param filter: List of initial letters to include
             * @param sortKey: Key to sort on when building index list
             */
            { { "listIndexes", "stas(is)" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::listIndexesStubDispatcher },
            /**
             * Create a new empty container with path used as root
                     returns: Path
             *  identifier for the newly created container
                     errors: NO_CONNECTION if
             *  no connection can be established to underlying
                              browsing
             *  engine
                              BAD_PATH if path parameter is invalid
             * @param path: Path to place the newly created container in
             * @param displayName: Display name for the new container
             * @param childTypes: Array of allowed types on children in new container
             */
            { { "createContainer", "ssas" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::createContainerStubDispatcher },
            /**
             * Place a reference in a container, pointing to an object
                     returns: Path
             *  identifier for the container containing the reference
                     errors:
             *  NO_CONNECTION if no connection can be established to underlying
                          
             *     browsing engine
                              BAD_PATH if path parameter is invalid
             * @param path: Path to place the newly created container in
             * @param objectPath: Path to object to create reference to
             */
            { { "createReference", "ss" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::createReferenceStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::mediamanager::BrowserDBusStubAdapterInternal::getBrowserInterfaceVersionStubDispatcher });
}

const bool BrowserDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace mediamanager
} // namespace genivi
} // namespace org
