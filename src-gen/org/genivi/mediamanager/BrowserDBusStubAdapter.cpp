/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.
* Used org.franca.core 0.8.9.
*
* 
*/
#include "BrowserDBusStubAdapter.h"
#include <org/genivi/mediamanager/Browser.h>

namespace org {
namespace genivi {
namespace mediamanager {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createBrowserDBusStubAdapter(
                   const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<BrowserDBusStubAdapter>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

__attribute__((constructor)) void registerBrowserDBusStubAdapter(void) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(Browser::getInterfaceId(),
                                                               &createBrowserDBusStubAdapter);
}

BrowserDBusStubAdapter::BrowserDBusStubAdapter(
        const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        BrowserDBusStubAdapterHelper(factory, commonApiAddress, dbusInterfaceName, dbusBusName, dbusObjectPath, 
            dbusConnection, std::dynamic_pointer_cast<BrowserStub>(stub),
            false) {
}

BrowserDBusStubAdapter::~BrowserDBusStubAdapter() {
    deactivateManagedInstances();
    deinit();
    stub_.reset();
}

void BrowserDBusStubAdapter::deactivateManagedInstances() {
}

const char* BrowserDBusStubAdapter::getMethodsDBusIntrospectionXmlData() const {
    static const char* introspectionData =
        /**
         * Return a list of all media manager identifiers. These are
                 used to
         *  indicate which media manager we should interact with.
                 returns: A list
         *  of all media managers found
         */
        "<method name=\"discoverMediaManagers\">\n"
            "<arg name=\"identifiers\" type=\"as\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * List all containers below the given path.
                 returns: A JSON list of all
         *  containers with the given path as parent
                 errors: NO_CONNECTION if no
         *  connection can be established to underlying
                          browsing engine
        
         *                   BAD_PATH if path parameter is invalid
         * @param path The path to search for containers. The format of the path
                       
         *  depends on the underlying browsing backend
         * @param offset: The offset to use for indexing the results list
         * @param count: The number of results to return, starting from offset
         * @param filter: Array of keys to include in resulting JSON elements
         */
        "<method name=\"listContainers\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"containers\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Extends ListContainers with sorting capabilities
         * @param sortKey Key to sort JSON result list on
         */
        "<method name=\"listContainersEx\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"sortKey\" type=\"(is)\" direction=\"in\" />\n"
            "<arg name=\"containers\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * List all items in the given container
                 returns: A JSON list of all
         *  items with the given container as parent
                 errors: NO_CONNECTION if no
         *  connection can be established to underlying
                          browsing engine
        
         *                   BAD_PATH if path parameter is invalid
         * @param path The path of the container to search for items.
                        The format
         *  of the path depends on the underlying browsing
                        backend
         * @param offset: The offset to use for indexing the results list
         * @param count: The number of results to return, starting from offset
         * @param filter: Array of keys to include in resulting JSON elements
         */
        "<method name=\"listItems\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"items\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Extends ListItems with sorting capabilities
         * @param sortKey Key to sort JSON result list on
         */
        "<method name=\"listItemsEx\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"sortKey\" type=\"(is)\" direction=\"in\" />\n"
            "<arg name=\"items\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * List all children in the given container
                 returns: A JSON list of all
         *  children with the given container as parent
                 errors: NO_CONNECTION if
         *  no connection can be established to underlying
                          browsing
         *  engine
                          BAD_PATH if path parameter is invalid
         * @param path The path of the container to search for children.
                        The
         *  format of the path depends on the underlying browsing
                        backend
         * @param offset: The offset to use for indexing the results list
         * @param count: The number of results to return, starting from offset
         * @param filter: Array of keys to include in resulting JSON elements
         */
        "<method name=\"listChildren\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"children\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Extends ListChildren with sorting capabilities
         * @param sortKey Key to sort JSON result list on
         */
        "<method name=\"listChildrenEx\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"sortKey\" type=\"(is)\" direction=\"in\" />\n"
            "<arg name=\"children\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Search for children in the given container
                 returns: A JSON list of all
         *  children matching the search criteria with
                           the given
         *  container as parent
                 errors: NO_CONNECTION if no connection can be
         *  established to underlying
                          browsing engine
                         
         *  BAD_PATH if path parameter is invalid
         * @param path The path of the container to search for children.
                        The
         *  format of the path depends on the underlying browsing
                        backend
         * @param query Search query to match children against. The format of the
                       
         *  query depends on the underlying browsing backend
         * @param offset: The offset to use for indexing the results list
         * @param count: The number of results to return, starting from offset
         * @param filter: Array of keys to include in resulting JSON elements
         */
        "<method name=\"searchObjects\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"query\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"objects\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Extends SearchObjects with sorting capabilities
         * @param sortKey Key to sort JSON result list on
         */
        "<method name=\"searchObjectsEx\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"query\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"offset\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"sortKey\" type=\"(is)\" direction=\"in\" />\n"
            "<arg name=\"objects\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Get a list of all initial letters and their index in the
                             
         *  given container
                 returns: A JSON list of tuples of initial letters and
         *  their first
                           observed position when sorting according to
         *  sortKey
                 errors: NO_CONNECTION if no connection can be established to
         *  underlying
                          browsing engine
                          BAD_PATH if
         *  path parameter is invalid
         * @param container: Container to build index list for
         * @param count: How many (unsorted) items should be traversed to build
                         
         *         index
         * @param filter: List of initial letters to include
         * @param sortKey: Key to sort on when building index list
         */
        "<method name=\"listIndexes\">\n"
            "<arg name=\"container\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"count\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"filter\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"sortKey\" type=\"(is)\" direction=\"in\" />\n"
            "<arg name=\"indexes\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Create a new empty container with path used as root
                 returns: Path
         *  identifier for the newly created container
                 errors: NO_CONNECTION if
         *  no connection can be established to underlying
                          browsing
         *  engine
                          BAD_PATH if path parameter is invalid
         * @param path: Path to place the newly created container in
         * @param displayName: Display name for the new container
         * @param childTypes: Array of allowed types on children in new container
         */
        "<method name=\"createContainer\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"displayName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"childTypes\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"pathIdentifier\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * Place a reference in a container, pointing to an object
                 returns: Path
         *  identifier for the container containing the reference
                 errors:
         *  NO_CONNECTION if no connection can be established to underlying
                      
         *     browsing engine
                          BAD_PATH if path parameter is invalid
         * @param path: Path to place the newly created container in
         * @param objectPath: Path to object to create reference to
         */
        "<method name=\"createReference\">\n"
            "<arg name=\"path\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"objectPath\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"pathIdentifier\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"e\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        
    ;
    return introspectionData;
}



/**
 * Return a list of all media manager identifiers. These are
         used to
 *  indicate which media manager we should interact with.
         returns: A list
 *  of all media managers found
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<>,
    std::tuple<std::vector<std::string>, BrowserTypes::BrowserError>
    > discoverMediaManagersStubDispatcher(&BrowserStub::discoverMediaManagers, "asi");
/**
 * List all containers below the given path.
         returns: A JSON list of all
 *  containers with the given path as parent
         errors: NO_CONNECTION if no
 *  connection can be established to underlying
                  browsing engine

 *                   BAD_PATH if path parameter is invalid
 * @param path The path to search for containers. The format of the path
               
 *  depends on the underlying browsing backend
 * @param offset: The offset to use for indexing the results list
 * @param count: The number of results to return, starting from offset
 * @param filter: Array of keys to include in resulting JSON elements
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<std::string, BrowserTypes::BrowserError>
    > listContainersStubDispatcher(&BrowserStub::listContainers, "si");
/**
 * Extends ListContainers with sorting capabilities
 * @param sortKey Key to sort JSON result list on
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>, BrowserTypes::SortKey>,
    std::tuple<std::string, BrowserTypes::BrowserError>
    > listContainersExStubDispatcher(&BrowserStub::listContainersEx, "si");
/**
 * List all items in the given container
         returns: A JSON list of all
 *  items with the given container as parent
         errors: NO_CONNECTION if no
 *  connection can be established to underlying
                  browsing engine

 *                   BAD_PATH if path parameter is invalid
 * @param path The path of the container to search for items.
                The format
 *  of the path depends on the underlying browsing
                backend
 * @param offset: The offset to use for indexing the results list
 * @param count: The number of results to return, starting from offset
 * @param filter: Array of keys to include in resulting JSON elements
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<std::string, BrowserTypes::BrowserError>
    > listItemsStubDispatcher(&BrowserStub::listItems, "si");
/**
 * Extends ListItems with sorting capabilities
 * @param sortKey Key to sort JSON result list on
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>, BrowserTypes::SortKey>,
    std::tuple<std::string, BrowserTypes::BrowserError>
    > listItemsExStubDispatcher(&BrowserStub::listItemsEx, "si");
/**
 * List all children in the given container
         returns: A JSON list of all
 *  children with the given container as parent
         errors: NO_CONNECTION if
 *  no connection can be established to underlying
                  browsing
 *  engine
                  BAD_PATH if path parameter is invalid
 * @param path The path of the container to search for children.
                The
 *  format of the path depends on the underlying browsing
                backend
 * @param offset: The offset to use for indexing the results list
 * @param count: The number of results to return, starting from offset
 * @param filter: Array of keys to include in resulting JSON elements
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<std::string, BrowserTypes::BrowserError>
    > listChildrenStubDispatcher(&BrowserStub::listChildren, "si");
/**
 * Extends ListChildren with sorting capabilities
 * @param sortKey Key to sort JSON result list on
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, uint64_t, uint64_t, std::vector<std::string>, BrowserTypes::SortKey>,
    std::tuple<std::string, BrowserTypes::BrowserError>
    > listChildrenExStubDispatcher(&BrowserStub::listChildrenEx, "si");
/**
 * Search for children in the given container
         returns: A JSON list of all
 *  children matching the search criteria with
                   the given
 *  container as parent
         errors: NO_CONNECTION if no connection can be
 *  established to underlying
                  browsing engine
                 
 *  BAD_PATH if path parameter is invalid
 * @param path The path of the container to search for children.
                The
 *  format of the path depends on the underlying browsing
                backend
 * @param query Search query to match children against. The format of the
               
 *  query depends on the underlying browsing backend
 * @param offset: The offset to use for indexing the results list
 * @param count: The number of results to return, starting from offset
 * @param filter: Array of keys to include in resulting JSON elements
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, std::string, uint64_t, uint64_t, std::vector<std::string>>,
    std::tuple<std::string, BrowserTypes::BrowserError>
    > searchObjectsStubDispatcher(&BrowserStub::searchObjects, "si");
/**
 * Extends SearchObjects with sorting capabilities
 * @param sortKey Key to sort JSON result list on
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, std::string, uint64_t, uint64_t, std::vector<std::string>, BrowserTypes::SortKey>,
    std::tuple<std::string, BrowserTypes::BrowserError>
    > searchObjectsExStubDispatcher(&BrowserStub::searchObjectsEx, "si");
/**
 * Get a list of all initial letters and their index in the
                     
 *  given container
         returns: A JSON list of tuples of initial letters and
 *  their first
                   observed position when sorting according to
 *  sortKey
         errors: NO_CONNECTION if no connection can be established to
 *  underlying
                  browsing engine
                  BAD_PATH if
 *  path parameter is invalid
 * @param container: Container to build index list for
 * @param count: How many (unsorted) items should be traversed to build
                 
 *         index
 * @param filter: List of initial letters to include
 * @param sortKey: Key to sort on when building index list
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, uint64_t, std::vector<std::string>, BrowserTypes::SortKey>,
    std::tuple<std::string, BrowserTypes::BrowserError>
    > listIndexesStubDispatcher(&BrowserStub::listIndexes, "si");
/**
 * Create a new empty container with path used as root
         returns: Path
 *  identifier for the newly created container
         errors: NO_CONNECTION if
 *  no connection can be established to underlying
                  browsing
 *  engine
                  BAD_PATH if path parameter is invalid
 * @param path: Path to place the newly created container in
 * @param displayName: Display name for the new container
 * @param childTypes: Array of allowed types on children in new container
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, std::string, std::vector<std::string>>,
    std::tuple<std::string, BrowserTypes::BrowserError>
    > createContainerStubDispatcher(&BrowserStub::createContainer, "si");
/**
 * Place a reference in a container, pointing to an object
         returns: Path
 *  identifier for the container containing the reference
         errors:
 *  NO_CONNECTION if no connection can be established to underlying
              
 *     browsing engine
                  BAD_PATH if path parameter is invalid
 * @param path: Path to place the newly created container in
 * @param objectPath: Path to object to create reference to
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    BrowserStub,
    std::tuple<std::string, std::string>,
    std::tuple<std::string, BrowserTypes::BrowserError>
    > createReferenceStubDispatcher(&BrowserStub::createReference, "si");



const BrowserDBusStubAdapter::StubDispatcherTable& BrowserDBusStubAdapter::getStubDispatcherTable() {
    static const BrowserDBusStubAdapter::StubDispatcherTable stubDispatcherTable = {
            /**
             * Return a list of all media manager identifiers. These are
                     used to
             *  indicate which media manager we should interact with.
                     returns: A list
             *  of all media managers found
             */
            { { "discoverMediaManagers", "" }, &org::genivi::mediamanager::discoverMediaManagersStubDispatcher },
            /**
             * List all containers below the given path.
                     returns: A JSON list of all
             *  containers with the given path as parent
                     errors: NO_CONNECTION if no
             *  connection can be established to underlying
                              browsing engine
            
             *                   BAD_PATH if path parameter is invalid
             * @param path The path to search for containers. The format of the path
                           
             *  depends on the underlying browsing backend
             * @param offset: The offset to use for indexing the results list
             * @param count: The number of results to return, starting from offset
             * @param filter: Array of keys to include in resulting JSON elements
             */
            { { "listContainers", "sttas" }, &org::genivi::mediamanager::listContainersStubDispatcher },
            /**
             * Extends ListContainers with sorting capabilities
             * @param sortKey Key to sort JSON result list on
             */
            { { "listContainersEx", "sttas(is)" }, &org::genivi::mediamanager::listContainersExStubDispatcher },
            /**
             * List all items in the given container
                     returns: A JSON list of all
             *  items with the given container as parent
                     errors: NO_CONNECTION if no
             *  connection can be established to underlying
                              browsing engine
            
             *                   BAD_PATH if path parameter is invalid
             * @param path The path of the container to search for items.
                            The format
             *  of the path depends on the underlying browsing
                            backend
             * @param offset: The offset to use for indexing the results list
             * @param count: The number of results to return, starting from offset
             * @param filter: Array of keys to include in resulting JSON elements
             */
            { { "listItems", "sttas" }, &org::genivi::mediamanager::listItemsStubDispatcher },
            /**
             * Extends ListItems with sorting capabilities
             * @param sortKey Key to sort JSON result list on
             */
            { { "listItemsEx", "sttas(is)" }, &org::genivi::mediamanager::listItemsExStubDispatcher },
            /**
             * List all children in the given container
                     returns: A JSON list of all
             *  children with the given container as parent
                     errors: NO_CONNECTION if
             *  no connection can be established to underlying
                              browsing
             *  engine
                              BAD_PATH if path parameter is invalid
             * @param path The path of the container to search for children.
                            The
             *  format of the path depends on the underlying browsing
                            backend
             * @param offset: The offset to use for indexing the results list
             * @param count: The number of results to return, starting from offset
             * @param filter: Array of keys to include in resulting JSON elements
             */
            { { "listChildren", "sttas" }, &org::genivi::mediamanager::listChildrenStubDispatcher },
            /**
             * Extends ListChildren with sorting capabilities
             * @param sortKey Key to sort JSON result list on
             */
            { { "listChildrenEx", "sttas(is)" }, &org::genivi::mediamanager::listChildrenExStubDispatcher },
            /**
             * Search for children in the given container
                     returns: A JSON list of all
             *  children matching the search criteria with
                               the given
             *  container as parent
                     errors: NO_CONNECTION if no connection can be
             *  established to underlying
                              browsing engine
                             
             *  BAD_PATH if path parameter is invalid
             * @param path The path of the container to search for children.
                            The
             *  format of the path depends on the underlying browsing
                            backend
             * @param query Search query to match children against. The format of the
                           
             *  query depends on the underlying browsing backend
             * @param offset: The offset to use for indexing the results list
             * @param count: The number of results to return, starting from offset
             * @param filter: Array of keys to include in resulting JSON elements
             */
            { { "searchObjects", "ssttas" }, &org::genivi::mediamanager::searchObjectsStubDispatcher },
            /**
             * Extends SearchObjects with sorting capabilities
             * @param sortKey Key to sort JSON result list on
             */
            { { "searchObjectsEx", "ssttas(is)" }, &org::genivi::mediamanager::searchObjectsExStubDispatcher },
            /**
             * Get a list of all initial letters and their index in the
                                 
             *  given container
                     returns: A JSON list of tuples of initial letters and
             *  their first
                               observed position when sorting according to
             *  sortKey
                     errors: NO_CONNECTION if no connection can be established to
             *  underlying
                              browsing engine
                              BAD_PATH if
             *  path parameter is invalid
             * @param container: Container to build index list for
             * @param count: How many (unsorted) items should be traversed to build
                             
             *         index
             * @param filter: List of initial letters to include
             * @param sortKey: Key to sort on when building index list
             */
            { { "listIndexes", "stas(is)" }, &org::genivi::mediamanager::listIndexesStubDispatcher },
            /**
             * Create a new empty container with path used as root
                     returns: Path
             *  identifier for the newly created container
                     errors: NO_CONNECTION if
             *  no connection can be established to underlying
                              browsing
             *  engine
                              BAD_PATH if path parameter is invalid
             * @param path: Path to place the newly created container in
             * @param displayName: Display name for the new container
             * @param childTypes: Array of allowed types on children in new container
             */
            { { "createContainer", "ssas" }, &org::genivi::mediamanager::createContainerStubDispatcher },
            /**
             * Place a reference in a container, pointing to an object
                     returns: Path
             *  identifier for the container containing the reference
                     errors:
             *  NO_CONNECTION if no connection can be established to underlying
                          
             *     browsing engine
                              BAD_PATH if path parameter is invalid
             * @param path: Path to place the newly created container in
             * @param objectPath: Path to object to create reference to
             */
            { { "createReference", "ss" }, &org::genivi::mediamanager::createReferenceStubDispatcher }
            };
    return stubDispatcherTable;
}


} // namespace mediamanager
} // namespace genivi
} // namespace org
