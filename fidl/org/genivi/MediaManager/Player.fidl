 /**
  * Copyright (C) 2014, Jaguar Land Rover
  *
  * Author: Jonatan Palsson <jonatan.palsson@pelagicore.com>
  *
  * Heavily inspired by the MPRIS2 Player specification (http://specifications.
  *     freedesktop.org/mpris-spec/latest/Player_Interface.html)
  *
  * This file is part of the GENIVI Media Manager Proof-of-Concept
  * For further information, see http://genivi.org/
  *
  * This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  */

package org.genivi.mediamanager

interface Player {
    version {
        major 1
        minor 0
    }

    // Attributes
    <** @description: Mute or unmute audio. When muted, the player backend will
                      not produce any audio output. **>
    attribute MuteStatus mute

    <** @description: Shuffle or unshuffle the current play queue. Shuffling,
                   un-shuffling and then re-shuffling will yield two different
                   shufflings (which are not guaranteed to be different)
    **>
    attribute ShuffleStatus shuffle

    <** @description: Toggle repeat for the current playlist. If enabled,
                      playback will continue with the first item of the current
                      play queue when the last item has finished playing
    **>
    attribute RepeatStatus repeat

    <** @description: Set the playback rate **>
    attribute RateStatus rate

    <** @description: Get or set volume, 0 is muted, and 1.0 means maximum
                      volume. Values outside this range will be capped **>
    attribute Double volume

    <** @description: Indicates whether Next() is available **>
    attribute Boolean canGoNext readonly

    <** @description: Indicates whether Previous() is available **>
    attribute Boolean canGoPrevious readonly

    <** @description: Indicates whether Pause() is available **>
    attribute Boolean canPause readonly

    <** @description: Indicates whether Play() is available **>
    attribute Boolean canPlay readonly

    <** @description: Indicates whether Seek and SetPosition() are available **>
    attribute Boolean canSeek readonly

    <** @description: Indicates the index in the play queue of the currently
                      playing track **>
    attribute UInt64 currentTrack readonly

    <** @description: Indicates current playback status **>
    attribute PlaybackStatus playbackStatus readonly

    <** @description: Indicates current position in the currently playing
                      track **>
    attribute UInt64 position readonly noSubscriptions

    // Methods
    <** @description: Skip to the next track in the play queue. If there is no
                       next track, playback is stopped. If playback is paused or
                       stopped, this function will set the next plack to be
                       played once playback is activated
    **>
    method next {
        out {
            PlayerError e
        }
    }

    <** @description: Open the supplied Uri for playback in the playback engine.
         returns: INVALID_URI When an invalid URI is supplied
                               (decided by playback engine)
                   NO_ERROR    On success
        @param:   uri URI of media to play, uri format is decided by backend
    **>

    method openUri {
        in {
            String uri
        }
        out {
            PlayerError e
        }
    }

    <** @description: Enqueue the supplied Uri for playback in the playback engine.
         returns: INVALID_URI When an invalid URI is supplied
                               (decided by playback engine)
                  NO_ERROR    On success
        @param:   uri URI of media to enqueue, uri format is decided by backend
    **>

    method enqueueUri {
        in {
            String uri
        }
        out {
            PlayerError e
        }
    }

    <** @description: Dequeue the item with the supplied index in the playback
                      engine.
        @param: pos index of media to dequeue
    **>

    method dequeueIndex {
        in {
            UInt64 pos
        }
        out {
            PlayerError e
        }
    }

    <** @description: Retrieve the current play queue in JSON format
         returns: Current play queue in JSON format
    **>
    method getCurrentPlayQueue {
        out {
            String playQueue
            PlayerError e
        }
    }

    <** @description: Dequeue all elementrs, emptying the play queue
    **>

    method dequeueAll {
        out {
            PlayerError e
        }
    }

    <** @description: Use the supplied playlist as the current play queue. If
                      the play queue is invalid, the old play queue is
                      untouched.
         returns: BAD_PLAYLIST If playlist can not be loaded
                   NO_ERROR     On success
    **>
    method openPlaylist {
        in {
            String uri
        }
        out {
            PlayerError e
        }
    }

    <** @description: Pause playback in the playback engine.
                       If already paused, this has no effect
                       Note: If CanPause is false, this has no effect
     **>
    method pause {
        out {
            PlayerError e
        }
    }

    <** @description: Start or resume playback in the playback engine.
                       If playback is already commencing, this has not effect.
                       If paused, playback resumes from the current position.
                       If there is no track to play, calling this has no effect
                       Note: If CanPlay is false, this has no effect
    **>
    method play {
        out {
            PlayerError e
        }
    }

    <** @description: Starts playback (see Play) if paused
                      Pauses playback (see Pause) is playing
        @see: Play
        @see: Pause
    **>
    method playPause {
        out {
            PlayerError e
        }
    }

    <** @description: Loads previous track in play queue
                      If there is no previous track, playback is stopped
                      If playback is stopped or paused, it remains this way,
                      but the next track to be played will the set
                      by this function
                      Note: If CanGoPrevious is false, this has no effect
    **>
    method previous {
        out {
            PlayerError e
        }
    }

    <** @description: Seek relatively in the current track
                      If a negative seek leads to a play position less than 0,
                      the play position will be set to 0.
                      If a positive seek leads outside the length of the current
                      track, this is treated like a call to Next()
                      Note: If CanSeek is false, this has no effect
        @param: pos Relative seek amount in microseconds
        @see: Next
    **>
    method seek {
        in {
            Int64 pos
        }
        out {
            PlayerError e
        }
    }

    <** @description: Jump to the specified position in the current
                       If the position is not within range of the current track,
                       do nothing
         Note: If CanSeek is false, this has no effect
         @param: pos Absolute position in microseconds
    **>
    method setPosition {
        in {
            UInt64 pos
        }
        out {
            PlayerError e
        }
    }

    // Data structures
    enumeration MuteStatus {
        MUTED
        UNMUTED
    }

    enumeration PlayerError{
        NO_ERROR

        BAD_PLAYLIST
        BACKEND_UNREACHABLE
    }

    enumeration ShuffleStatus {
        SHUFFLE
        UNSHUFFLE
    }

    enumeration RepeatStatus {
        REPEAT
        REPEAT_SINGLE
        NO_REPEAT
    }

    enumeration RateStatus {
        RATE_NEG_16
        RATE_NEG_8
        RATE_NEG_4
        RATE_NEG_2
        RATE_NEG_1
        RATE_1
        RATE_2
        RATE_4
        RATE_8
        RATE_16
    }

    enumeration PlaybackStatus {
        PLAYING
        PAUSED
    }
}
